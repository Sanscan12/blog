(window.webpackJsonp=window.webpackJsonp||[]).push([[117],{455:function(t,e,a){"use strict";a.r(e);var s=a(4),v=Object(s.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"数据加密"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数据加密"}},[t._v("#")]),t._v(" 数据加密")]),t._v(" "),e("p",[t._v("工具类应用 "),e("RouterLink",{attrs:{to:"/ruoyi-vue-plus/97/#encryptutils"}},[t._v("点击跳转")])],1),t._v(" "),e("h2",{attrs:{id:"数据库加密"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数据库加密"}},[t._v("#")]),t._v(" 数据库加密")]),t._v(" "),e("p",[t._v("ruoyi-vue-plus 数据库加密是通过 Mybatis拦截器实现 , 在处理字段时 有"),e("code",[t._v("EncryptField")]),t._v("注解的字段会进行加密处理 . 当数据添加时加密 , 获取时解密")]),t._v(" "),e("p",[e("strong",[t._v("支持加密算法 :")]),t._v(" "),e("code",[t._v("BASE64")]),t._v(" "),e("code",[t._v("AES")]),t._v(" "),e("code",[t._v("RSA")]),t._v(" "),e("code",[t._v("SM2")]),t._v(" "),e("code",[t._v("SM4")])]),t._v(" "),e("p",[e("strong",[t._v("参考文档")])]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("ruoyi-vue-plus数据库加密应用文档 :")]),t._v(" "),e("a",{attrs:{href:"https://plus-doc.dromara.org/#/ruoyi-vue-plus/framework/extend/encrypt",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://plus-doc.dromara.org"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("strong",[t._v("Liu_York博主Mybatis拦截器笔记 :")]),t._v(" "),e("a",{attrs:{href:"https://blog.csdn.net/Liu_York/article/details/88053053",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://blog.csdn.net/Liu_York"),e("OutboundLink")],1)])]),t._v(" "),e("h3",{attrs:{id:"应用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#应用"}},[t._v("#")]),t._v(" 应用")]),t._v(" "),e("ol",[e("li",[t._v("配置 秘钥 & 类型")]),t._v(" "),e("li",[t._v("对象属性写上 "),e("code",[t._v("EncryptField")]),t._v("注解 , 参数标识 加密类型")]),t._v(" "),e("li",[t._v("执行SQL , 新增、修改、查询 , 即可实现存储加密 , 获取解密")])]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),e("p",[t._v("查询解密仅限于当前实体类 , 不支持继承实体类方式解密")])]),t._v(" "),e("h3",{attrs:{id:"实现原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#实现原理"}},[t._v("#")]),t._v(" 实现原理")]),t._v(" "),e("p",[t._v("理解过程的前提可以看下 "),e("a",{attrs:{href:"#mybatis%E6%8B%A6%E6%88%AA"}},[t._v("Mybatis拦截器")]),t._v(" 大概运作")]),t._v(" "),e("h4",{attrs:{id:"数据加密-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数据加密-2"}},[t._v("#")]),t._v(" 数据加密")]),t._v(" "),e("p",[t._v("数据加密拦截处理的时期是 参数传递设置时进行处理 , 注解配置项 (根据"),e("a",{attrs:{href:"#signature"}},[t._v("Signature")]),t._v("控制拦截时期)")]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Intercepts")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Signature")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    type "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ParameterHandler")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    method "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"setParameters"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    args "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PreparedStatement")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[e("strong",[t._v("数据加密过程 :")])]),t._v(" "),e("ol",[e("li",[e("p",[t._v("执行传参SQL时 , 进入 "),e("code",[t._v("plugin()")]),t._v("代理方法 , 判断 "),e("code",[t._v("ParameterHandler")]),t._v("处理类型")])]),t._v(" "),e("li",[e("p",[t._v("获取当前参数对象(SQL传递的参数) , 该对象不能为空并且也不能是字符串 , 必须是对象才进行加密处理")])]),t._v(" "),e("li",[e("p",[t._v("对象加密处理 "),e("code",[t._v("encryptHandler()")]),t._v("方法 , 判断 以下三种类型 以及拆箱过程")]),t._v(" "),e("p",[e("em",[t._v("null类型不处理 / Map类型取值递归拆箱加密 / List类型循环取值递归拆箱加密")])]),t._v(" "),e("ul",[e("li",[t._v("Null值 : 跳出加密处理")]),t._v(" "),e("li",[t._v("Map类型 : 取出所有value值递归执行")]),t._v(" "),e("li",[t._v("List类型 : 判空 , 非空则获取List第一个对象 , 并判断当中的字段是否包含 "),e("code",[t._v("EncryptField")]),t._v("加密注解 , 只要第一个含有"),e("code",[t._v("EncryptField")]),t._v("加密注解 , 那么循环List递归执行")])])]),t._v(" "),e("li",[e("p",[t._v("注册式反射获取对象字段 , 采用 "),e("code",[t._v("EncryptorManager#getFieldCache()")]),t._v(" 获取对象所有字段")]),t._v(" "),e("p",[e("em",[t._v("EncryptorManager#getFieldCache() 注册式获取对象反射的字段 (首次反射获取 , 下次缓存获取)")])])]),t._v(" "),e("li",[e("p",[t._v("循环对象的所有字段 , 加密处理")]),t._v(" "),e("ol",[e("li",[t._v("判空处理 , 空则 跳过循环")]),t._v(" "),e("li",[t._v("获取对象注解 (加密类型以及信息) , 并根据注解构建 "),e("code",[t._v("EncryptContext")]),t._v("上下文对象")]),t._v(" "),e("li",[t._v("注册式获取加解者 , 根据 "),e("code",[t._v("EncryptContext")]),t._v("上下文对象 和 加密配置信息 反射获取 (相同的上下文配置 , 获取相同的加解者)")]),t._v(" "),e("li",[t._v("使用加解者加密处理 , 加密其他配置信息可直接在 "),e("code",[t._v("EncryptContext")]),t._v("上下文对象获取")]),t._v(" "),e("li",[t._v("对该字段反射设置加密的值")])])])]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("注册式获取")]),t._v(" "),e("p",[t._v("注册式获取 是减少频繁实例和反射次数为目的一种优化方案 , 首次访问会进行缓存起来 , 下次获取时直接取缓存中的已注册对象 . 存储形式一般是Map , key一般是 class类型、配置对象 等..")])]),t._v(" "),e("h4",{attrs:{id:"数据解密"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数据解密"}},[t._v("#")]),t._v(" 数据解密")]),t._v(" "),e("p",[t._v("数据解密拦截处理的时期是 SQL执行出结果集 , 注解配置项 (根据"),e("a",{attrs:{href:"#signature"}},[t._v("Signature")]),t._v("控制拦截时期)")]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Intercepts")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Signature")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    type "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ResultSetHandler")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    method "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"handleResultSets"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    args "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Statement")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[e("strong",[t._v("数据解密过程 :")]),t._v(" (步骤3-5 与加密的相同)")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("SQL执行出结果值时 , 进入 "),e("code",[t._v("plugin()")]),t._v("代理方法 , 采用 "),e("code",[t._v("Plugin.wrap(target, this)")]),t._v("绑定关联代理拦截器方法"),e("code",[t._v("intercept()")])])]),t._v(" "),e("li",[e("p",[t._v("拦截后置处理(SQL执行出结果) , 在"),e("code",[t._v("intercept()")]),t._v("方法中 , 执行 "),e("code",[t._v("invocation.proceed()")]),t._v("方法得到结果")])]),t._v(" "),e("li",[e("p",[t._v("解密结果集处理 "),e("code",[t._v("decryptHandler()")]),t._v(" , 判断 以下三种类型 以及拆箱过程")]),t._v(" "),e("p",[e("em",[t._v("null类型不处理 / Map类型取值递归拆箱加密 / List类型循环取值递归拆箱加密")])]),t._v(" "),e("ul",[e("li",[t._v("Null值 : 跳出加密处理")]),t._v(" "),e("li",[t._v("Map类型 : 取出所有value值递归执行")]),t._v(" "),e("li",[t._v("List类型 : 判空 , 非空则获取List第一个对象 , 并判断当中的字段是否包含 "),e("code",[t._v("EncryptField")]),t._v("加密注解 , 只要第一个含有"),e("code",[t._v("EncryptField")]),t._v("加密注解 , 那么循环List递归执行")])])]),t._v(" "),e("li",[e("p",[t._v("注册式反射获取对象字段 , 采用 "),e("code",[t._v("EncryptorManager#getFieldCache()")]),t._v(" 获取对象所有字段")]),t._v(" "),e("p",[e("em",[t._v("EncryptorManager#getFieldCache() 注册式获取对象反射的字段 (首次反射获取 , 下次缓存获取)")])])]),t._v(" "),e("li",[e("p",[t._v("循环对象的所有字段 , 解密处理")]),t._v(" "),e("ol",[e("li",[t._v("判空处理 , 空则 跳过循环")]),t._v(" "),e("li",[t._v("获取对象注解 (解密类型以及信息) , 并根据注解构建 "),e("code",[t._v("EncryptContext")]),t._v("上下文对象")]),t._v(" "),e("li",[t._v("注册式获取加解者 , 根据 "),e("code",[t._v("EncryptContext")]),t._v("上下文对象 和 解密配置信息 反射获取 (相同的上下文配置 , 获取相同的加解者)")]),t._v(" "),e("li",[t._v("使用加解者加密处理 , 加密其他配置信息可直接在 "),e("code",[t._v("EncryptContext")]),t._v("上下文对象获取")]),t._v(" "),e("li",[t._v("对该字段反射设置加密的值")])])]),t._v(" "),e("li",[e("p",[t._v("返回结果集 , "),e("code",[t._v("intercept()")]),t._v("方法 解密的结果集直接返回即可 (该对象地址映射的值已被解密处理)")])])]),t._v(" "),e("h3",{attrs:{id:"mybatis拦截"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mybatis拦截"}},[t._v("#")]),t._v(" Mybatis拦截")]),t._v(" "),e("p",[e("strong",[t._v("概念")])]),t._v(" "),e("ul",[e("li",[e("p",[e("code",[t._v("Intercepts")]),t._v("注解 , 标识拦截类 , 参数Signature注解控制拦截时期")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("Signature")]),t._v("注解 , 标识具体的拦截时期")]),t._v(" "),e("p",[e("em",[t._v("type(指定拦截类)、method(指定拦截类中的时期)、ages(拦截方法的参数)")])])]),t._v(" "),e("li",[e("p",[e("code",[t._v("Interceptor")]),t._v("接口 , Mybatis拦截器实现的接口 , 含以下3个实现方法")]),t._v(" "),e("ul",[e("li",[e("p",[e("code",[t._v("intercept(Invocation invocation)")]),t._v("方法 , 拦截前置和后置处理(前后分界线为 "),e("code",[t._v("invocation.proceed()")]),t._v("继续执行方法) , Invocation 含有"),e("code",[t._v("Signature")]),t._v("注解的标识信息 target (理解为type)、method、ages . 可以得知哪个时期触发拦截 , 日志场景")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("plugin()")]),t._v("方法 , 代理拦截时期的处理过程 , 不处理则返回本身")]),t._v(" "),e("p",[e("em",[t._v("PS : 如果拦截了多个时期(Signature) , 那么代理处理前建议判断 参数对象类型 , 以免交叉处理现象")])])]),t._v(" "),e("li",[e("p",[e("code",[t._v("setProperties()")]),t._v("方法 , 加载核心配置文件时设置变量参数")])])])])]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),e("p",[e("code",[t._v("plugin()")]),t._v("方法 是 返回代理对象的拦截器 或 不处理 , 返回的值有以下两种形式")]),t._v(" "),e("ol",[e("li",[t._v("返回对象本身 "),e("code",[t._v("target")]),t._v(" : 不处理拦截器代理的方法"),e("code",[t._v("intercept()")])]),t._v(" "),e("li",[t._v("返回 "),e("code",[t._v("Plugin.wrap(target, this)")]),t._v(" : 创建并绑定代理拦截器方法"),e("code",[t._v("intercept()")]),t._v(" , 但拦截器方法一定调用 "),e("code",[t._v("invocation.proceed()")]),t._v("方法执行")])])]),t._v(" "),e("p",[e("a",{attrs:{id:"signature"}},[e("code",[t._v("Signature")])]),t._v("注解 标识信息")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}},[t._v("type 拦截类")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("method  拦截方法")]),t._v(" "),e("th",[t._v("说明")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("Executor")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("update")]),t._v(" "),e("td",[t._v("库前后操作拦截")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("ParameterHandler")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("getParameterObject、setParameters")]),t._v(" "),e("td",[t._v("参数拦截")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("ResultSetHandler")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("handleResultSets、handleCursorResultSets、handleOutputParameters")]),t._v(" "),e("td",[t._v("结果集拦截")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("StatementHandler")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("prepare、parameterize、batch、update、query、queryCursor、getBoundSql、getParameterHandler")]),t._v(" "),e("td",[t._v("SQL语句拦截")])])])])])}),[],!1,null,null,null);e.default=v.exports}}]);