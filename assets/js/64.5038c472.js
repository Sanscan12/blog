(window.webpackJsonp=window.webpackJsonp||[]).push([[64],{399:function(t,a,v){"use strict";v.r(a);var _=v(4),s=Object(_.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"二叉树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二叉树"}},[t._v("#")]),t._v(" 二叉树")]),t._v(" "),a("p",[t._v("二叉树是树的一种每个节点最多可具有两个子树，即结点的度最大为 2（结点度：结点拥 有的子树数）")]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("数据域：")]),t._v(" 存储数据的元素\n"),a("strong",[t._v("指针域：")]),t._v(" 存储下个节点的地址")])]),t._v(" "),a("p",[t._v("当前根节点的左边全部比根节点小，当前根节点的右边全部比根节点大")]),t._v(" "),a("p",[t._v("图片9")]),t._v(" "),a("h2",{attrs:{id:"二叉树种类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二叉树种类"}},[t._v("#")]),t._v(" 二叉树种类")]),t._v(" "),a("h3",{attrs:{id:"斜树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#斜树"}},[t._v("#")]),t._v(" 斜树")]),t._v(" "),a("p",[t._v("所有结点都只有左子树，或者右子树")]),t._v(" "),a("p",[t._v("图片11")]),t._v(" "),a("h3",{attrs:{id:"满二叉树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#满二叉树"}},[t._v("#")]),t._v(" 满二叉树")]),t._v(" "),a("p",[t._v("所有的分支节点都具有左右节点")]),t._v(" "),a("p",[t._v("图片10")]),t._v(" "),a("h3",{attrs:{id:"完全二叉树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#完全二叉树"}},[t._v("#")]),t._v(" 完全二叉树")]),t._v(" "),a("p",[t._v("若设二叉树的深度为 h，除第 h 层外，其它各层 (1～h-1) 的结点数都达到最大个数，第 h 层所有的结点都连续集中在最左边，这就是完全二叉树")]),t._v(" "),a("p",[t._v("图片12")]),t._v(" "),a("h2",{attrs:{id:"二叉树遍历方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二叉树遍历方式"}},[t._v("#")]),t._v(" 二叉树遍历方式")]),t._v(" "),a("p",[t._v("图片13")]),t._v(" "),a("h2",{attrs:{id:"前序遍历"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前序遍历"}},[t._v("#")]),t._v(" 前序遍历")]),t._v(" "),a("p",[t._v("先访问根节点，然后遍历左子树，最后遍历右子树（根 > 左 > 右）")]),t._v(" "),a("p",[t._v("根据以上图片进行遍历：1 - 2 - 4 - 5 - 7 - 8 - 3 - 6 - 9")]),t._v(" "),a("h2",{attrs:{id:"中序遍历"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#中序遍历"}},[t._v("#")]),t._v(" 中序遍历")]),t._v(" "),a("p",[t._v("先遍历左子树，然后访问根节点，然后遍历右子树（左 > 根 > 右）")]),t._v(" "),a("p",[t._v("根据以上图片进行遍历：4 - 2 - 7 - 5 - 8 - 1 - 9 - 6 - 3")]),t._v(" "),a("h2",{attrs:{id:"后序遍历"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#后序遍历"}},[t._v("#")]),t._v(" 后序遍历")]),t._v(" "),a("p",[t._v("先遍历左子树，然后遍历右子树，最后访问树的根节点（左 > 右 > 根）")]),t._v(" "),a("p",[t._v("根据以上图片进行遍历：4 - 7 - 8 - 5 - 2 - 9 - 6 - 3 - 1")])])}),[],!1,null,null,null);a.default=s.exports}}]);