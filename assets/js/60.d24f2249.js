(window.webpackJsonp=window.webpackJsonp||[]).push([[60],{398:function(t,s,a){"use strict";a.r(s);var n=a(4),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"_1-前言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-前言"}},[t._v("#")]),t._v(" 1. 前言")]),t._v(" "),s("p",[t._v("非常感谢虎哥给我带来这篇Redis基础原理知识的讲解 , 让我更深刻地理解了Redis的设计思想和数据结构 . 从最基本概念到高级特性 , 虎哥想逐层讲解 , 让我们受益匪浅")]),t._v(" "),s("p",[s("strong",[t._v("视频 :")]),t._v(" "),s("a",{attrs:{href:"https://www.bilibili.com/video/BV1cr4y1671t/?p=1",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://www.bilibili.com"),s("OutboundLink")],1)]),t._v(" "),s("h2",{attrs:{id:"_2-数据结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-数据结构"}},[t._v("#")]),t._v(" 2. 数据结构")]),t._v(" "),s("h3",{attrs:{id:"_2-1-sds"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-sds"}},[t._v("#")]),t._v(" 2.1 SDS")]),t._v(" "),s("p",[t._v("Redis构建了一种新的字符串结构 , 称为简单动态字符串(SDS)")]),t._v(" "),s("p",[t._v("C语言中的字符串 , 是通过数组形式拼接字符 , 因此没有直接使用语言中的字符串 , 并且当中也存在很多问题 :")]),t._v(" "),s("ul",[s("li",[t._v("获取字符串长度的需要通过运算")]),t._v(" "),s("li",[t._v("非二进制安全")]),t._v(" "),s("li",[t._v("不可修改")])]),t._v(" "),s("p",[s("strong",[t._v("优点 :")])]),t._v(" "),s("ul",[s("li",[t._v("操作快 , 简单 , 灵活 (有标识记录长度等相关信息 , 用于检索数组操作)")]),t._v(" "),s("li",[t._v("动态扩容 (含有扩容相关机制)")]),t._v(" "),s("li",[t._v("二进制形式 , 相对安全")])]),t._v(" "),s("p",[s("strong",[t._v("缺点 :")])]),t._v(" "),s("ul",[s("li",[t._v("占用内存 (结构体包含的元数据过多)")]),t._v(" "),s("li",[t._v("功能有限 (仅限于读写操作 , 没有其他相关拓展功能)")])]),t._v(" "),s("p",[s("strong",[t._v("SDS结构体源码 :")])]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("源码 点击展开")]),t._v(" "),s("div",{staticClass:"language-C extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 控制SDS的头类型大小 */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("SDS_TYPE_5")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")])])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("SDS_TYPE_8")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")])])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("SDS_TYPE_16")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")])])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("SDS_TYPE_32")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")])])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("SDS_TYPE_64")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")])])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* sdshdr8 结构体名称 . 有很多个相同结构 如上面... */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("_attribute_")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("_packed_"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" sdshdr8 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* uint8_t : 无符号8个bit位 */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* buf已保存的字符串字节数 , 不包含结束标识 */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint8_t")]),t._v(" len"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* buf申请的总字节数 , 不包含结束标识 */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint8_t")]),t._v(" alloc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 不同SDS的头类型 , 用来控制SDS的头大小 */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" flags"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),s("div",{staticClass:"custom-block note"},[s("p",{staticClass:"custom-block-title"},[t._v("flags意图")]),t._v(" "),s("p",[t._v("uint8_t 定义的是 无符号8个bit位 , 8bit位长度就仅限于 0 - 255 的大小 , 那么通过 len 和 alloc 控制的长度不可能仅限于 0 - 255 , 因此 通过 flags 控制字节大小 , 尽可能将 8bit 压缩在 0 - 255 数值范围")]),t._v(" "),s("p",[s("strong",[t._v("PS :")]),t._v(" 1字节 = 8位")])]),t._v(" "),s("p",[t._v("假如我Redis执行该命令 "),s("code",[t._v("set name Sans")]),t._v(' . 那么Redis将在底层创建两个SDS , 分别对 {"name", "Sans"} 结构分析 :')]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("标识")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("属性")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("值")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("字节")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Header")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("lan")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("4")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("1")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Header")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("alloc")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("4")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("1")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Header")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("flags")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("1")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("1")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Data")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("buf[]")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("['n','a','m','e']")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("4(1*4)")])])])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("标识")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("属性")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("值")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("字节")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Header")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("lan")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("4")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("1")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Header")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("alloc")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("4")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("1")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Header")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("flags")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("1")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("1")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Data")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("buf[]")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("['S','a','n','s']")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("4(1*4)")])])])]),t._v(" "),s("p",[t._v('假如 往"Sans" SDS追加一段字符 ",Any" , 那么会执行内存拓展申请 : (申请有两种可能)')]),t._v(" "),s("ul",[s("li",[t._v("如果新字符串小于1M , 则 增加后的长度两倍 + 1")]),t._v(" "),s("li",[t._v("如果新字符串大于1M , 则 增加后的长度两倍 + 1M +1 (内存预分配)")])]),t._v(" "),s("p",[t._v('那么 "Sans" 这变为 "Sans,Any" , SDS结构分析')]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("标识")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("属性")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("值")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("字节")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Header")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("lan")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("8")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("1")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Header")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("alloc")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("12")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("1")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Header")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("flags")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("1")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("1")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Data")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("buf[]")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("['S', 'a', 'n', 's', ',', 'A', 'n', 'y']")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("8(1*8)")])])])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),s("p",[t._v("C语言字符串结尾必须有 "),s("code",[t._v("\\0")]),t._v(" 作为结束 , 因此 计算后的长度需要+1 , 就是为结束标示而腾出的位置")])]),t._v(" "),s("h3",{attrs:{id:"_2-2-intset"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-intset"}},[t._v("#")]),t._v(" 2.2 IntSet")]),t._v(" "),s("p",[t._v("IntSet是Redis中set集合的一种实现方式 , 基于 整数数组 来实现 , 并且具备 长度可变/有序 等特征")]),t._v(" "),s("p",[t._v("为了方便查找 , Redis会将intset中所有的整数按照升序依次保存在contents数组中")]),t._v(" "),s("p",[s("strong",[t._v("优点 :")])]),t._v(" "),s("ul",[s("li",[t._v("IntSet 确保元素 唯一 , 有序")]),t._v(" "),s("li",[t._v("类型升级机制 , 节省内存")]),t._v(" "),s("li",[t._v("快速查找 (内部采用二分查找算法)")]),t._v(" "),s("li",[t._v("内存连续 (存储是连续形式 , 充分利用资源)")])]),t._v(" "),s("p",[s("strong",[t._v("缺点 :")])]),t._v(" "),s("ul",[s("li",[t._v("只能用于整型")]),t._v(" "),s("li",[t._v("内存浪费 (当数组中有一个元素大数字 , 且其他都是小元素)")]),t._v(" "),s("li",[t._v("不能范围查找 (指定范围查元素)")])]),t._v(" "),s("p",[s("strong",[t._v("IntSet结构体源码 :")])]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("源码 点击展开")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 存放 encoding , 表示不同整型大小 */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 2字节 整数 , 类以java的short */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("INTSET_ENC16")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("nt16t_t")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")])])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 4字节 整数 , 类以java的int */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("INTSET_ENC32")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("nt32t_t")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")])])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 8字节 整数 , 类以java的long */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("INTSET_ENC64")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("int64_t")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")])])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("intset")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 编码方式 , 支特存放16位、32位、64位整数 */")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint32_t")]),t._v(" encoding"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 元素个数 */")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint32_t")]),t._v(" length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 整数数组 , 保存集合数据 */")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("int8_t")]),t._v(" contents"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("intset"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),s("p",[t._v("假如 使用intset存了 {20, 5, 10} 3个元素 , 采取编码 INTSET_ENC16(2字节) , "),s("strong",[t._v("IntSet结构分析 :")])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("标识")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("属性")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("值")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("字节")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Header")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("encoding")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("INTSET_ENC16")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("4")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Header")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("length")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("3")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("4")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Data")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("contents[]")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("[5,10,20]")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("6(2*3)")])])])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),s("p",[t._v("上面定义了采用的类型因此存储的字节是不一样的! 采用了 INTSET_ENC16 类型 2字节")])]),t._v(" "),s("p",[t._v("假如 数组添加了一个 5000 , 大于 INTSET_ENC16(2字节) 的范围 , IntSet会自动升级编码方式找到合适大小 , 升级流程 :")]),t._v(" "),s("ol",[s("li",[t._v("升级编码 INTSET_ENC_INT32(4字节) , 并按照新的编码方式及元素个数扩容数组")]),t._v(" "),s("li",[t._v("倒序依次将数组中的元素拷贝到扩容后的正确位置")]),t._v(" "),s("li",[t._v("将 5000元素 添加放入数组末尾")]),t._v(" "),s("li",[t._v("IntSet的 encoding属性改为INTSET_ENC_INT32 ; length属性改为4")])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),s("p",[t._v("步骤2 倒序扩容是为了防止前面的数在扩容时覆盖其他数据 . 一号元素占用2字节改为4字节  , 会占用到第二元素位置的2字节 .")]),t._v(" "),s("p",[t._v("为了防止这一现象 , 采用倒序扩容 , 从最后元素开始扩容 !")])]),t._v(" "),s("p",[s("strong",[t._v("结构分析 :")])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("标识")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("属性")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("值")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("字节")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Header")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("encoding")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("INTSET_ENC32")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("4")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Header")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("length")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("4")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("4")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Data")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("contents[]")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("[5,10,20,5000]")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("16(4*4)")])])])]),t._v(" "),s("h3",{attrs:{id:"_2-3-dict"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-dict"}},[t._v("#")]),t._v(" 2.3 Dict")]),t._v(" "),s("p",[t._v("Redis中的键值对映射关系底层是通过 Dict实现的 , 它涉及到 键值对 , 哈希表 , 有序集合等相关应用")]),t._v(" "),s("p",[t._v("Dict的底层是由 数组和链表 组合 , 数组中每个元素都是一个指向链表的指针 , 每个链表节点包含一个键值对")]),t._v(" "),s("p",[s("strong",[t._v("优点 :")])]),t._v(" "),s("ul",[s("li",[t._v("读写快 (O(1)时间复杂度)")]),t._v(" "),s("li",[t._v("动态 扩容/收缩 (根据实际情况变化内存)")]),t._v(" "),s("li",[t._v("支持高并发")])]),t._v(" "),s("p",[s("strong",[t._v("缺点 :")])]),t._v(" "),s("ul",[s("li",[t._v("占用内存多 (动态数组 , 相对少量数据可能比较浪费空间)")]),t._v(" "),s("li",[t._v("哈希可能冲突 (较为极端的例子)")]),t._v(" "),s("li",[t._v("不支持持久化 (dict基于内存存储)")])]),t._v(" "),s("p",[s("strong",[t._v("Dict结构体源码 :")])]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("源码 点击展开")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("dict")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// dict类型 , 内置不同的hash函数")]),t._v("\n\tdictType "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("type"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 私有数据 , 在做特殊hash运算时用")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("privdata"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 一个Dict包含两个哈希表 , 一个是当前数据 , 另一个 rehash时使用(一般为空) ")]),t._v("\n\tdictht ht"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// rehash的进度 , -1:未进行; rehashidx > -1:运行")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" rehashidx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// rehash是否暂停 , 1:暂停;0:继续")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("int16_t")]),t._v(" pauserehash"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("dict"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("dictht")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// entry数组")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 数组中保存的是指向entry的指针")]),t._v("\n\tdictEntry "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("table"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 哈希表大小")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 哈希表大小的掩码 , 总等于size-1")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" sizemask"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// entry个数")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" used"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("dictht"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 哈希节点 dictEntry")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("dictEntry")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 键 key")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 值 val")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("union")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("val"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint64_t")]),t._v(" u64"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("int64_t")]),t._v(" s64"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" d"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 下一个Entry的指针")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("dictEntry")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("next"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("dictEntry"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),s("p",[s("strong",[t._v("结构图 :")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://image.bozhu12.cc/myblog/Redis/redis-10.png",alt:""}})]),t._v(" "),s("h4",{attrs:{id:"_2-3-1-扩容机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-1-扩容机制"}},[t._v("#")]),t._v(" 2.3.1 扩容机制")]),t._v(" "),s("p",[t._v("Dict中的 table 是数组与单向链表 的结构 , 当集合的元素较多时 , 必然会导致哈希冲突 , 和链表过长问题 , 甚至会影响效率\n因此 Dict内置了 自动扩容机制 , 当每次新增键值对的时 , 会检测 "),s("strong",[t._v("负载因子")]),t._v("(LoadFactor) , 判断以下两种条件会触发扩容 :")]),t._v(" "),s("ul",[s("li",[t._v("LoadFactor >= 1 , 并且 Redis 没有进行持久化")]),t._v(" "),s("li",[t._v("LoadFactor > 5")])]),t._v(" "),s("p",[s("strong",[t._v("计算公式 :")]),t._v(" "),s("code",[t._v("负载因子(LoadFactor) = used(当前元素总数)/size(空间总数)")])]),t._v(" "),s("p",[s("strong",[t._v("扩容运作过程 :")])]),t._v(" "),s("ol",[s("li",[t._v("创建 新Hash , 新Hash大小为 原Hash元素总数+1 的2^n (简单理解为2倍)")]),t._v(" "),s("li",[t._v("将 原Hash 所有元素逐个遍历 , 插入 新Hash (重新分配 哈希桶 , 防止hash冲突)")]),t._v(" "),s("li",[t._v("插入完后 Redis会将 原Hash 释放")])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),s("p",[t._v("dict.ht[0] = 原Hash")]),t._v(" "),s("p",[t._v("dict.ht[1] = 新Hash")])]),t._v(" "),s("div",{staticClass:"custom-block note"},[s("p",{staticClass:"custom-block-title"},[t._v("扩容中的特殊情况")]),t._v(" "),s("p",[s("strong",[t._v("扩容中插入元素 :")])]),t._v(" "),s("p",[t._v("在扩容中若有 新元素 插入 , Redis会将 新元素 先插入 原Hash 中 , 再将 原Hash 所有元素逐个遍历插入至 新Hash (利用key唯一性 , 保证了 新元素 不会缺漏)")]),t._v(" "),s("p",[s("strong",[t._v("扩容中多线程操作dict :")])]),t._v(" "),s("p",[t._v("在扩容中 , 如果有多个线程同时对dict进行操作 , Redis会采取读写锁机制保证 dict 的线程安全")])]),t._v(" "),s("p",[s("strong",[t._v("扩容机制源码 :")])]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("源码 点击展开")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("_dictExpandIfNeeded")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dict "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("d"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果正在rehash , 则返回ok")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dictIsRehashing")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("d"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" DICT_OK"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果哈希表为空 , 则初始化哈希表为默认大小 : 4")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("d"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("ht"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("size "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dictExpand")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("d"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" DICT_HT_INITIAL_SIZE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当负载因子(used/size)达到1以上 , 并且当前没有进行ogrewrite(持久化过程)")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// d->ht[0].used >= d->ht[0].size => (used/size)达到1以上")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// dict_can_resize (Redis是否闲置状态 , 非持久化状态)")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// d->ht[0].used/d->ht[0].size > dict_force_resize_ratio => 负载因子超过5 , 则进行dictExpand(扩容)")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("d"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("ht"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("used "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" d"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("ht"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("size "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dict_can_resize "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" d"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("ht"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("used"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("d"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("ht"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("size "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" dict_force_resize_ratio"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 扩容大小为used + 1 , 底层会对扩容大小做判断 , 实际上找的是第一个大于等于 used + 1 的 2^n")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dictExpand")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("d"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" d"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("ht"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("used"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" DICT_OK"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),s("h4",{attrs:{id:"_2-3-2-收缩机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-2-收缩机制"}},[t._v("#")]),t._v(" 2.3.2 收缩机制")]),t._v(" "),s("p",[t._v("Dict还有收缩机制 , 正是和扩容机制相反 . 每当删除元素的时候 , 会检测 "),s("strong",[t._v("负载因子")]),t._v("(LoadFactor)")]),t._v(" "),s("p",[t._v("触发条件 : LoadFactor < 0.1")]),t._v(" "),s("p",[s("strong",[t._v("收缩源码 :")])]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("源码 点击展开")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//t_hash.c hashTypeDeleted()")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 删除元素")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dictDelete")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dict"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("o"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("ptr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" field"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" C_OK"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tdeleted "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 删除成功后 , 检查是否需要重置Dict大小 , 如果需要则调用dictResize重置")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("htNeedsResize")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("o"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("ptr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dictResize")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("o"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("ptr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n    \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// server.c文件")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 检查是否需要收缩")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("htNeedsResize")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dict "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("dict"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("used"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 哈希表大小")]),t._v("\n\tsize "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dictslots")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dict"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// entry数量")]),t._v("\n\tused "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dictsize")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dict"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// size > 4 (哈希表初识大小) && 负载因子低于0.1")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// DICT_HT_INITIAL_SIZE: 4 ; HASHTABLE_MIN_FILL: 10")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// (used*100/size < HASHTABLE_MIN_FILL) => user/size < 0.1")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("size "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" DICT_HT_INITIAL_SIZE "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("used"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("size "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" HASHTABLE_MIN_FILL"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dictResize")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dict "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("d"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" minimal"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果正在做 bgsave或ogrewriteof或rehash , 则返回错误")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("dict_can_resize "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dictIsRehashing")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("d"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" DICT_ERR"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取used , 也就是entry个数")]),t._v("\n\tminimal "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" d"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("ht"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("used"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果used小于4 , 则重置为4")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("minimal "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" DICT_HT_INITIAL_SIZE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" minimal "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" DICT_HT_INITIAL_SIZE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 重置大小为ninimal , 其实是第一个大于等于minimal的2^n")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dictExpand")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("d"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" minimal"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),s("h4",{attrs:{id:"_2-3-3-rehash"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-3-rehash"}},[t._v("#")]),t._v(" 2.3.3 rehash")]),t._v(" "),s("p",[t._v("rehash是dict的一种重建哈希表的机制(扩容/收缩 新Hash) . 当dict 的 size发生变化 , 都会检测 扩容/收缩 条件 , 为此要 将 原Hash 中的所有键值对重新插入到 新Hash 中 , 这个过程叫做 rehash")]),t._v(" "),s("p",[s("strong",[t._v("rehash运作原理 :")])]),t._v(" "),s("ol",[s("li",[t._v("计算 新Hash 的大小 , 取决于当前 扩容/收缩\n"),s("ul",[s("li",[t._v("扩容 : 新size >= 原Hash元素总数+1 的 2^n")]),t._v(" "),s("li",[t._v("收缩 : 新size >= 原Hash元素总数 的 2^n  (不得小于4)")])])]),t._v(" "),s("li",[t._v("新Hash 申请内存空间 , 创建dictht , 并赋值给dict.ht[1]")]),t._v(" "),s("li",[t._v("设置 dict.rehashidx = 0 , 标示 开始rehash (可以理解成数组的索引)")]),t._v(" "),s("li",[t._v("检查 dict.rehashidx > -1  , 如果是则将 dict.ht[0].table[rehashidx]的 键值对 插入 dict.ht[1] , 并且 rehash++ , 直到 dict.ht[0] 所有数据都插入完 (插入时 会重新分配 hash值)")]),t._v(" "),s("li",[t._v("插入完后 , 给dict.ht[1]初始化为空哈希表 , 释放原来的dict.ht[0]的内存")]),t._v(" "),s("li",[t._v("将 dict.rehashidx = -1 , 标示 结束rehash")])]),t._v(" "),s("div",{staticClass:"custom-block note"},[s("p",{staticClass:"custom-block-title"},[t._v("rehash中的其他情况")]),t._v(" "),s("p",[s("strong",[t._v("rehash中插入元素 :")])]),t._v(" "),s("p",[t._v("直接写入 dict.ht[1]")]),t._v(" "),s("p",[s("strong",[t._v("rehash中多线程操作dict :")])]),t._v(" "),s("p",[t._v("dict.ht[0] 和 dict.ht[1] 并行执行 互不干扰 , 保证 dict.ht[0] 只减不增 , 最终rehash结束 , 原Hash为空")])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),s("p",[t._v("dict.ht[0] = 原Hash")]),t._v(" "),s("p",[t._v("dict.ht[1] = 新Hash")])]),t._v(" "),s("p",[s("strong",[t._v("rehash源码 :")])]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("源码 点击展开")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// dict.c 文件")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 伸缩控制 dictExpand (参数3可以无视)")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("_dictExpand")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dict "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("d"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" malloc_failed"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("malloc_failed"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("malloc_failed "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 检查 状态/申请合理 , 如果 entry数量超过要申请的size大小 或 正在rehash , 则报错 */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dictIsRehashing")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("d"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" d"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("ht"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("used "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" DICT_ERR"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 新声明 hash table */")]),t._v("\n    dictht n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 实际大小(下面有函数说明) , size <= 2^n(2^n为刚好大于或等于size)")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" realsize "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("_dictNextPower")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 检查内存溢出 , 超出 LONG_MAX , 报错 */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("realsize "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" size "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" realsize "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dictEntry"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" realsize"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" DICT_ERR"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 检查变化 , 新size如果和原size 一致 , 报错 */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("realsize "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" d"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("ht"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" DICT_ERR"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 分配新的哈希表并将所有指针初始化为 NULL */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 重置大小")]),t._v("\n    n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("size "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" realsize"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 重置掩码")]),t._v("\n    n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sizemask "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" realsize"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("malloc_failed"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("table "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ztrycalloc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("realsize"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dictEntry"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("malloc_failed "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("table "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("malloc_failed"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" DICT_ERR"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 分配内存: size * entrySize")]),t._v("\n        n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("table "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("zcalloc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("realsize"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dictEntry"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("used "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 如果是第一次 , 则直接把n复制给ht[0] */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("d"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("ht"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("table "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        d"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("ht"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" DICT_OK"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 准备第二个哈希表以进行增量重新哈希 */")]),t._v("\n    d"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("ht"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    d"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("rehashidx "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" DICT_OK"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2^n计算")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("_dictNextPower")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// DICT_HT_INITIAL_SIZE: 4")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" DICT_HT_INITIAL_SIZE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("size "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" LONG_MAX"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" LONG_MAX "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1LU")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),s("h3",{attrs:{id:"_2-4-ziplist"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-ziplist"}},[t._v("#")]),t._v(" 2.4 ZipList")]),t._v(" "),s("p",[t._v("ZipList 是个特殊的 双向链表 , 它把小数据的内存压缩到极致 , 元素是由连续不确定形式的内存块组成(每个元素内存不定) .")]),t._v(" "),s("p",[t._v("在Redis中常用于 List 和 Zset 的基础数据结构")]),t._v(" "),s("p",[s("strong",[t._v("优点 :")])]),t._v(" "),s("ul",[s("li",[t._v("紧凑式存储 (省内存)")]),t._v(" "),s("li",[t._v("读写快")])]),t._v(" "),s("p",[s("strong",[t._v("缺点 :")])]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#_2-4-2-%E8%BF%9E%E9%94%81%E6%9B%B4%E6%96%B0%E9%97%AE%E9%A2%98"}},[t._v("连锁更新")])])]),t._v(" "),s("p",[s("strong",[t._v("ZipList结构体源码 :")])]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("源码 点击展开")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ziplist")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 记录整个ZipList的字节数(4字节)")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint32_t")]),t._v(" zlbytes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 指向ZipList的最后一个节点的偏移量(从开头指向最后元素的开始)(4字节)")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint32_t")]),t._v(" zltail"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 记录ZipList中元素总量(2字节)")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint16_t")]),t._v(" zllen"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 以下是实际的数据存储空间 , 这个空间是紧凑的字节数组")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 每个节点包含一个前置节点长度的字段prevlen和一个实际存储数据的entry字段")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// entry字段可以是字符串、整数或者浮点数 , 长度根据实际数据类型使用不同的字节数")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" entry data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 结束符(1字节)")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint8_t")]),t._v(" zlend"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" ziplist"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),s("p",[s("strong",[t._v("ZipListEntry结构体")])]),t._v(" "),s("p",[t._v("ZipListEntry是 data[]中的元素 , Entry 的并不像普通链表那样记录前后节点的指针 , 采用以下结构记录不同类型的数据")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("previous_entry_length")]),t._v(" "),s("th",[t._v("encoding")]),t._v(" "),s("th",[t._v("content")])])]),t._v(" "),s("tbody")]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("previous_entry_length:")]),t._v(" 前置Entry的长度所占的字节数(1/5 字节)")]),t._v(" "),s("ul",[s("li",[t._v("如果 前置Entry长度 < 254 , 采用 1字节")]),t._v(" "),s("li",[t._v("如果 前置Entry长度 >= 254 , 采用 5字节 , 第一个字节为 0xfe(2^8-1) , 后面为真实长度")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("encoding :")]),t._v(" 编码属性 , 记录content数据类型 , (1/2/5 字节)")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("content :")]),t._v(" 负责保存节点的数据 , 可以是字符串或整数")])])]),t._v(" "),s("h4",{attrs:{id:"_2-4-1-encoding编码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-1-encoding编码"}},[t._v("#")]),t._v(" 2.4.1 encoding编码")]),t._v(" "),s("p",[t._v("ZipListEntry中的 encoding编码分为 整数和字符串两种 :")]),t._v(" "),s("ul",[s("li",[t._v("字符串 头标识 "),s("code",[t._v("00")]),t._v("(1字节)/"),s("code",[t._v("01")]),t._v("(2字节)/"),s("code",[t._v("10")]),t._v("(5字节)")]),t._v(" "),s("li",[t._v("整型 头标识 "),s("code",[t._v("11")]),t._v("(1字节)")])]),t._v(" "),s("p",[s("strong",[t._v("字符串")])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"left"}},[t._v("编码")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("编码长度")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("字符串")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("|00pp pppp|")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("1 bytes")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("<= 63 bytes")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("|01pp pppp|qqqq qqqq|")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("2 bytes")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("<= 16383 bytes")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("|1000 0000|qqqq qqqq|rrrr rrrr|ssss ssss|tttt tttt|")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("5 bytes")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("<= 4294967295 bytes")])])])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),s("p",[t._v("含有字母的代表存真实内存空间")])]),t._v(" "),s("p",[t._v('假如 分别存储字符串 {"ab", "bc"} , 那么对 ZipList结构体 内存分析 :')]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("标识")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("属性")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("值")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("字节")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Header")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("zlbytes")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("19")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("4")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Header")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("zltail")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("14")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("4")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Header")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("zllen")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("2")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("2")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Data")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("entry[0]")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v('"ab"')]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("4")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Data")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("entry[1]")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v('"bc"')]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("4")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Tail")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("zlend")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("0xff")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("1")])])])]),t._v(" "),s("p",[t._v('ZipListEntry结构体 分析 : (Entry的 "ab"和"bc")')]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("标识")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("属性")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("值")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("字节")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Header")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("previous_entry_length")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("0000 0000 (0x00)")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("1")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Header")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("encoding")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("0000 0010 (0x02)")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("1")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Data")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("content")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v('0x61 | 0x62 ("ab")')]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("2")])])])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("标识")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("属性")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("值")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("字节")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Header")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("previous_entry_length")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("0000 0100 (0x04)")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("1")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Header")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("encoding")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("0000 0010 (0x02)")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("1")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Data")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("content")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v('0x62 | 0x63 ("bc")')]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("2")])])])]),t._v(" "),s("p",[s("strong",[t._v("整数")])]),t._v(" "),s("p",[t._v("encoding编码 以 "),s("code",[t._v("11")]),t._v(" 代表content为整型 , 固定占用1字节")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("编码")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("编码长度")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("整型类型")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("11000000")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("1 bytes")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("int16_t（2 bytes）")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("11010000")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("1 bytes")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("int32_t（4 bytes）")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("11100000")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("1 bytes")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("int64_t（8 bytes）")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("11110000")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("1 bytes")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("24位有符整数(3 bytes)")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("11111110")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("1 bytes")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("8位有符整数(1 bytes)")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("1111xxxx")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("1 bytes(含数据)")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("直接在xxxx位置保存数值 , 范围从0001~1101 , 减1后结果为实际值")])])])]),t._v(" "),s("p",[t._v("假如 分别存储 {65536 , 3} , 那么对 ZipList结构体 内存分析 :")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("标识")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("属性")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("值")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("字节")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Header")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("zlbytes")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("19")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("4")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Header")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("zltail")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("16")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("4")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Header")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("zllen")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("2")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("2")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Data")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("entry[1]")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("65536")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("6")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Data")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("entry[0]")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("3")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("2")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Tail")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("zlend")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("0xff")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("1")])])])]),t._v(" "),s("p",[t._v("ZipListEntry结构体 分析 : (Entry的 3 和 65536)")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("标识")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("属性")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("值")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("字节")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Header")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("previous_entry_length")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("0000 0000 (0x00)")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("1")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Header")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("encoding")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("1101 0000 (0xd0)")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("1")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Data")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("content")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("65536")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("4")])])])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("标识")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("属性")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("值")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("字节")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Header")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("previous_entry_length")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("0000 0110 (0x06)")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("1")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Header-Data")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("encoding")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("1111 "),s("strong",[t._v("0010")]),t._v(" (0xf4)")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("1")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Data")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("content")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("0010(0x04) => 4 - 1 = 3")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("-")])])])]),t._v(" "),s("div",{staticClass:"custom-block note"},[s("p",{staticClass:"custom-block-title"},[t._v("特殊编码标识")]),t._v(" "),s("p",[t._v("1111 xxxx , 高位1111代表编码标识 , 低位xxxx代表存储的数据 , 低位仅限范围 0001 - 1101")]),t._v(" "),s("ul",[s("li",[t._v("1111 0000(0xf0) 代表 24位有符整数")]),t._v(" "),s("li",[t._v("1111 1111(0xff) 代表 结束符")]),t._v(" "),s("li",[t._v("1111 1110 代表 8位有符整数")])]),t._v(" "),s("p",[t._v("低位的编码 不能容许相同形式的出现 : 因此 低位 最小值为 0001 ; 最大值为 1101")]),t._v(" "),s("p",[t._v("那么 他的范围仅限于 1 - 14 , 为了临近实际值 , 因此实际范围为 0 - 13")]),t._v(" "),s("p",[t._v("假如 存储 5 , 那么存储范围则为 1111 00110 => 结果值 6 => 实际值 5")])]),t._v(" "),s("h4",{attrs:{id:"_2-4-2-连锁更新问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-2-连锁更新问题"}},[t._v("#")]),t._v(" 2.4.2 连锁更新问题")]),t._v(" "),s("p",[t._v("ZipListEntry的 "),s("code",[t._v("previous_entry_length")]),t._v(" 用来记录上一Entry节点的直接大小 , 记录的结果只有两种情况分别是 1 / 5 字节 两种")]),t._v(" "),s("p",[s("strong",[t._v("案例 :")])]),t._v(" "),s("p",[t._v("假如 ZipList 链表中有 N个连续且长度为 249 - 254 字节之间的Entry , 这N个Entry的 previous_entry_length也好只用1字节存储 , 如果在ZipListEntry头结点添加一个 254字节的Entry (触发下一节点previous_entry_length采用5字节) , 那么后面的Entry的previous_entry_length也随之变化变为5 , 卡点 254(249+5) , 从而身亲大量不必要的内存 , 像这种情况连续性多次空间拓展 称为 连锁更新 .")]),t._v(" "),s("div",{staticClass:"custom-block note"},[s("p",{staticClass:"custom-block-title"},[t._v("笔记")]),t._v(" "),s("p",[t._v("以上是非常极端的情况 , 发生概率极低 , 作者目前也没对其解决")])]),t._v(" "),s("h3",{attrs:{id:"_2-5-qicklist"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-qicklist"}},[t._v("#")]),t._v(" 2.5 QickList")]),t._v(" "),s("p",[t._v("QickList是 双向链表和压缩列表 的混合结构 . QickList的每个节点都包含一个 ZIpList , 用于存储多个连续列表元素 , 过个节点之间是相互链接的 . 其目的是节省内存的同时 , 还保持良好的性能 . 在Redis中用于 List数据结构")]),t._v(" "),s("p",[s("strong",[t._v("优点 :")])]),t._v(" "),s("ul",[s("li",[t._v("节省内存 (QickList管理ziplist连续元素)")]),t._v(" "),s("li",[t._v("效率高 (头尾 增删快 , 满足列表特性)")])]),t._v(" "),s("p",[s("strong",[t._v("缺点 :")])]),t._v(" "),s("ul",[s("li",[t._v("访问中间元素新能差 (需要遍历)")])]),t._v(" "),s("p",[s("strong",[t._v("QickList结构体源码 :")])]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("源码 点击展开")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("quicklist")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 头节点指针")]),t._v("\n    quicklistNode "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("head"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 尾节点指针")]),t._v("\n    quicklistNode "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("tail"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 所有ziplist的entry数量")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" count"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ziplists总数量")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" len"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ziplist的entry上限 , 默认-2 ")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" fill "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" QL_FILL_BITS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 首尾不压缩的节点数量")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" compress "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" QL_COMP_BITS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 内存重分配是的书签数量以及数组(一般怎么用)")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" bookmark_count"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" QL_BM_BITS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    quicklistBookmark bookmarks"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" quicklist"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ziplist节点")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("quicklistNode")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 前一个节点指针")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("quicklistNode")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("prev"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 下一个节点指针")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("quicklistNode")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("next"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当前ziplist节点 指针")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("zl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当前ziplist节点 字节大小")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" sz"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("             \n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当前ziplist节点 entry个数")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" count "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 编码方式: 1.ziplist; 2.lzf压缩")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" encoding "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 数据容器类型: 1.其他; 2.ziplist")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" container "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当前ziplist节点 是否被解压缩: 1.被解压了, 需要重新压缩")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" recompress "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 测试用")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" attempted_compress "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 预留字段")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" extra "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" quicklistNode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),s("p",[s("strong",[t._v("结构图 :")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://image.bozhu12.cc/myblog/Redis/redis-11.png",alt:""}})]),t._v(" "),s("h4",{attrs:{id:"_2-5-1-redis-配置项"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-1-redis-配置项"}},[t._v("#")]),t._v(" 2.5.1 Redis 配置项")]),t._v(" "),s("p",[t._v("涉及到 QickList 配置项有 :")]),t._v(" "),s("ul",[s("li",[t._v("list-max-ziplist-size 控制大小")]),t._v(" "),s("li",[t._v("list-compress-depth 节点压缩")])]),t._v(" "),s("p",[s("strong",[t._v("list-max-ziplist-size")])]),t._v(" "),s("p",[t._v("控制 QuickList中的 每个ZipList大小 , 通过 数值控制 , 如下 :")]),t._v(" "),s("ul",[s("li",[t._v("正数 : 指定 ziplist允许最大entry个数")]),t._v(" "),s("li",[t._v("负数 : 指定 ziplist最大内存大小")])]),t._v(" "),s("p",[t._v("负数内存大小指定说明 :")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("配置项值")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("说明")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("-1")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("每个ZipList内存大小 <= 4kb")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("-2")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("每个ZipList内存大小 <= 8kb (默认值)")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("-3")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("每个ZipList内存大小 <= 16kb")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("-4")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("每个ZipList内存大小 <= 32kb")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("-5")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("每个ZipList内存大小 <= 64kb")])])])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),s("p",[t._v("1 kb = 1024 bytes(字节)")])]),t._v(" "),s("p",[s("strong",[t._v("list-compress-depth")])]),t._v(" "),s("p",[t._v("控制 QuickList中的 ZipList节点做压缩 , 通过 数值控制 , 如下 :")]),t._v(" "),s("ul",[s("li",[t._v("0 : 特殊值 , 不压缩(默认)")]),t._v(" "),s("li",[t._v("1 : QuickList 的首尾各一个节点不压缩 , 中间节点压缩")]),t._v(" "),s("li",[t._v("N : QuickList 的首尾各N个节点不压缩 , 中间节点压缩")])]),t._v(" "),s("h3",{attrs:{id:"_2-6-skiplist"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-6-skiplist"}},[t._v("#")]),t._v(" 2.6 SkipList")]),t._v(" "),s("p",[t._v("SkipList(跳表)是有序的双向链表的数据结构 , 节点可能含有多节点指针 , 不同跨度 , 其目的是为了 插入/删除/查询 速度都达到 O(log n) , 在Redis中用于 ZSet数据类型")]),t._v(" "),s("p",[s("strong",[t._v("优点 :")])]),t._v(" "),s("ul",[s("li",[t._v("查询效率堪比二分查找")]),t._v(" "),s("li",[t._v("实现简单 , 容易维护")])]),t._v(" "),s("p",[s("strong",[t._v("缺点 :")])]),t._v(" "),s("ul",[s("li",[t._v("消耗内存空间 (空间换时间)")])]),t._v(" "),s("p",[s("strong",[t._v("SkipList结构体源码 :")])]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("源码 点击展开")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("zskiplist")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 头尾节点指针")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("zskiplistNode")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("header"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("tail"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 节点数量")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 最大的索引层级(默认1 ;最大20)")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" level"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("zskiplist"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("zskiplistNode")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 节点存储的值")]),t._v("\n\tsds ele"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 节点分数 , 排序、查找用")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" score"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 前一个节点指针")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("zskiplistNode")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("backward"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 多级 索引数组")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("zskiplistLevel")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 下一个节点指针")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("zskiplistNode")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("forward"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 索引跨度")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" span"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("level"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("zskiplistNode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),s("p",[s("strong",[t._v("结构图 :")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://image.bozhu12.cc/myblog/Redis/redis-12.png",alt:""}})]),t._v(" "),s("h3",{attrs:{id:"_2-7-redisobject"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-7-redisobject"}},[t._v("#")]),t._v(" 2.7 RedisObject")]),t._v(" "),s("p",[t._v("Redis中的任意数据类型的键和值都会被封装为一个RedisObject")]),t._v(" "),s("p",[s("strong",[t._v("SkipList结构体源码 :")])]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("源码 点击展开")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("redisobject")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对象类型(4bit)(string;hsah;list;set;zset)")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" type"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 底层编码方式(4bit)")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" encoding"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 最后一次访问的时间戳(24bit)(判断闲置过久的key)")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// LRU: 以秒单位记录最近一次访问时间 , 长度(24bit)")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// LFU: ")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// \t   - 高16位以分钟为单位记录最近一次访问时间")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     - 低8位记录逻辑访问次数")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" lru"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("LRU_BITS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对象引用计数器(4bytes)(0:对象无人引用; 每次引用+1)")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" refcount"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 真实对象数据指针(8bytes)")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ptr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("robj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),s("p",[t._v("Redis存储数据类型的"),s("strong",[t._v("encoding编码")])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("编号")])]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("编码方式")])]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("说明")])])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("0")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("OBJ_ENCODING_RAW")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("raw编码动态字符串")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("1")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("OBJ_ENCODING_INT")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("long类型的整数的字符串")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("2")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("OBJ_ENCODING_HT")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("hash表(字典dict)")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("3")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("OBJ_ENCODING_ZIPMAP")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("已废弃")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("4")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("OBJ_ENCODING_LINKEDLIST")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("双端链表")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("5")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("OBJ_ENCODING_ZIPLIST")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("压缩列表")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("6")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("OBJ_ENCODING_INTSET")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("整数集合")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("7")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("OBJ_ENCODING_SKIPLIST")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("跳表")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("8")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("OBJ_ENCODING_EMBSTR")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("embstr的动态字符串")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("9")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("OBJ_ENCODING_QUICKLIST")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("快速列表")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("10")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("OBJ_ENCODING_STREAM")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("Stream流")])])])]),t._v(" "),s("p",[t._v("Redis每种数据类型的使用的编码方式")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("数据类型")])]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("编码方式")])])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("OBJ_STRING")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("int ; embstr ; raw")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("OBJ_LIST")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("LinkedList和ZipList(3.2以前) ; QuickList（3.2以后）")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("OBJ_SET")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("intset ; HT")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("OBJ_ZSET")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("ZipList ; HT ; SkipList")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("OBJ_HASH")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("ZipList ; HT")])])])]),t._v(" "),s("h3",{attrs:{id:"_2-8-string"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-8-string"}},[t._v("#")]),t._v(" 2.8 String")]),t._v(" "),s("p",[t._v("Redis最常见类型String , 其编码有 :")]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("RAW编码")]),t._v("  , 存储上限512mb ("),s("a",{attrs:{href:"#_2-1-sds"}},[t._v("基于SDS实现")]),t._v(")")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("EMBSTR编码")])]),t._v(" "),s("p",[t._v("采用条件 : 当SDS总长度小于44字节")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("INT编码")])]),t._v(" "),s("p",[t._v("采用条件 : 字符串中内容是整数值 , 且大小为 LONG_MAX 范围内")])])]),t._v(" "),s("div",{staticClass:"custom-block note"},[s("p",{staticClass:"custom-block-title"},[t._v("笔记")]),t._v(" "),s("p",[s("strong",[t._v("EMBSTR编码")])]),t._v(" "),s("p",[t._v("RAW编码 在RedisObject中是需要指针 *ptr 指向外部的SDS内存地址来引用 , 而 EMBSTR编码 在RedisObject中是一对连续空间 , 只需申请一次内存分配函数即可实现 . 无需指针指向外部地址 , 能节省更多空间 , 无需寻址 , 效率更高")]),t._v(" "),s("p",[s("strong",[t._v("INT编码")])]),t._v(" "),s("p",[t._v("INT编码 直接在RedisObject中的 *ptr 位置抽出刚好的8字节空间存储")])]),t._v(" "),s("p",[t._v("三种类型的结构图 :")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://image.bozhu12.cc/myblog/Redis/redis-13.png",alt:""}})]),t._v(" "),s("h3",{attrs:{id:"_2-9-list"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-9-list"}},[t._v("#")]),t._v(" 2.9 List")]),t._v(" "),s("p",[t._v("Redis的List类型 可从首尾进行操作元素 , 底层通过 [QickList](#2.5 QickList)实现(3.2版本后)")]),t._v(" "),s("p",[s("strong",[t._v("Push源码")])]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("源码 点击展开")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** push源码\n\t\tclient: 客户端信息,当中包含有命令\n\t\twhere: 0:头新增; 1:尾新增\n\t\txx: 当前push的key存在\n**/")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("pushGenericCommand")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("client "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" where"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" xx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 判断元素大小 , 不能超过LIST_MAX_ITEM_SIZE")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// LPUSH key v1 v2 ... (跳过前面两个 , 从2开始")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" c"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("argc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 遍历参数 argv[]")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sdslen")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("argv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("ptr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" LIST_MAX_ITEM_SIZE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("addReplyError")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Element too large"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 尝试找到KEY对应的list . 选择指定库db , argv[1]: key")]),t._v("\n    robj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("lobj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("lookupKeyWrite")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("db"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("argv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 检查类型是否正确")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("checkType")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("lobj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("OBJ_LIST"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 判断空")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("lobj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("xx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("addReply")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" shared"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("czero"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 为空情况 , 创建新的QuickList")]),t._v("\n        lobj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createQuicklistObject")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("quicklistSetOptions")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lobj"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("ptr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" server"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("list_max_ziplist_size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("server"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("list_compress_depth"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dbAdd")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("db"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("argv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("lobj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" c"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("argc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("listTypePush")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lobj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("argv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("where"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        server"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dirty"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("addReplyLongLong")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("listTypeLength")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lobj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("event "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("where "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" LIST_HEAD"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"lpush"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"rpush"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("signalModifiedKey")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("db"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("argv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("notifyKeyspaceEvent")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NOTIFY_LIST"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("event"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("argv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("db"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),s("p",[s("strong",[t._v("结构图 :")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://image.bozhu12.cc/myblog/Redis/redis-11.png",alt:""}})]),t._v(" "),s("h3",{attrs:{id:"_2-10-set"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-10-set"}},[t._v("#")]),t._v(" 2.10 Set")]),t._v(" "),s("p",[s("strong",[t._v("特点 :")])]),t._v(" "),s("ul",[s("li",[t._v("元素无序")]),t._v(" "),s("li",[t._v("元素唯一")]),t._v(" "),s("li",[t._v("求 交集/并集/差集")])]),t._v(" "),s("p",[s("strong",[t._v("Set编码选型 :")])]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("HT编码")]),t._v("  , 采取Dict实现 , 也是默认应用")]),t._v(" "),s("li",[s("strong",[t._v("IntSet编码")]),t._v("\n采用条件 : 但所有元素都是整数 , 且这些数值不超过 set-max-intset-entries 最大值")])]),t._v(" "),s("div",{staticClass:"custom-block note"},[s("p",{staticClass:"custom-block-title"},[t._v("IntSet编码转化HT编码情况")]),t._v(" "),s("p",[t._v("在采用IntSet编码的时 , 每当 插入/更改 元素 , 都会检测该元素的类型是否满足 , 如果不满足则转换为 HT编码")]),t._v(" "),s("p",[s("strong",[t._v("条件 :")])]),t._v(" "),s("ul",[s("li",[t._v("元素值为整数")]),t._v(" "),s("li",[t._v("数值 < set-max-intset-entries")])])]),t._v(" "),s("h3",{attrs:{id:"_2-11-zset"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-11-zset"}},[t._v("#")]),t._v(" 2.11 ZSet")]),t._v(" "),s("p",[t._v("ZSet集合 , 每个元素都要指定一个 score值和member值")]),t._v(" "),s("p",[s("strong",[t._v("特点 :")])]),t._v(" "),s("ul",[s("li",[t._v("score值排序")]),t._v(" "),s("li",[t._v("member唯一")]),t._v(" "),s("li",[t._v("member查询")])]),t._v(" "),s("p",[t._v("ZSet需要具备以上特性才能满足 , 因此会有以下数据结构组合方式 :")]),t._v(" "),s("ul",[s("li",[t._v("SkipList 和 Dict , 功能互补 , 效率高 , 耗内存 (SkipList无法满足 member查询)")]),t._v(" "),s("li",[t._v("ZipList , 节省内存 . 以下采用条件 :\n"),s("ul",[s("li",[t._v("元素数量 < zset_max_ziplist_entries , 默认 128(可配置)")]),t._v(" "),s("li",[t._v("每个元素 < zset_max_ziplist_value 字节 , 默认值 64(可配置)")])])])]),t._v(" "),s("div",{staticClass:"custom-block note"},[s("p",{staticClass:"custom-block-title"},[t._v("ZipList怎么作为ZSet来应用")]),t._v(" "),s("p",[t._v("ZipList是对连续内存 , 因此 score和element紧挨在Entry , element在前 , score在后 . score越小越接近队首 , 反之越靠尾 (升序)")])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),s("p",[t._v("当采用 ZipList时 , 每次添加元素都会检测元素是否满足条件 , 从而判断是否转化 SkipList 和 Dict 结构")])]),t._v(" "),s("p",[s("strong",[t._v("ZSet实现源码 :")])]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("源码 点击展开")]),t._v(" "),s("p",[s("strong",[t._v("SkipList 和 Dict")])]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// zset结构")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("zset")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Dict指针")]),t._v("\n\tdict "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("dict"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// SkipList指针")]),t._v("\n\tzskiplist "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("zsl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("zset"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建")]),t._v("\nrobj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createZsetobject")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tzset "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("zm "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("zmalloc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("zs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\trobj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建Dict")]),t._v("\n\tzs"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("dict "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dictCreate")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("zsetDictType"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建SkipList")]),t._v("\n\tzs"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("zsl "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("zslCreate")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\to "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createobject")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("OBJ_ZSET"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("zs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\to"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("encoding "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" OBJ_ENCODING_SKIPLIST"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[s("strong",[t._v("ZipList创建条件")])]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// zadd添加元素时 , 先根据key找到zset,不存在则创建新的zset")]),t._v("\nzobj "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("lookupKeyWrite")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("db"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("checkType")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("zobj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("OBJ_ZSET"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("goto")]),t._v(" cleanup"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//判断是否存在")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Zobj"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 判断采用 HT+SkipList/ZipList 方案")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// server.zset_max_ziplist_entries配置 禁用/启用")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 或者 value大小超过了zset_max_ziplist_value")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("server"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("zset_max_ziplist_entries "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" server"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("zset_max_ziplist_value "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sdslen")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("argv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("scoreidx"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("ptr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 采用 HT+SkipList")]),t._v("\n\t\tzobj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createzsetobject")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 采用 ZipList")]),t._v("\n\t\tzobj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createzsetziplistobject")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dbAdd")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("db"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("zobj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//..")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("zsetAdd")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("zobj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("score"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("ele"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("flags"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("retflags"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("newscore"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),s("p",[s("strong",[t._v("结构图 :")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://image.bozhu12.cc/myblog/Redis/redis-14.png",alt:""}})]),t._v(" "),s("h3",{attrs:{id:"_2-12-hash"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-12-hash"}},[t._v("#")]),t._v(" 2.12 Hash")]),t._v(" "),s("p",[s("strong",[t._v("特点 :")])]),t._v(" "),s("ul",[s("li",[t._v("键值对存储")]),t._v(" "),s("li",[t._v("按key获取值")]),t._v(" "),s("li",[t._v("key唯一")])]),t._v(" "),s("p",[s("strong",[t._v("Hash编码选型 :")])]),t._v(" "),s("ul",[s("li",[t._v("ZipList编码 , 连续内存的 键值Entry 成对出现 , 节省内存 , 也是默认采用编码")]),t._v(" "),s("li",[t._v("HT编码(Dict) , 数据较大时 , 以下采用条件 :\n"),s("ul",[s("li",[t._v("ziplist元素总数 >= hash-max-ziplist-entries , 默认 512(可配置)")]),t._v(" "),s("li",[t._v("ziplist中任意元素大小 >= hash-max-ziplist-value , 默认 64字节(可配置)")])])])]),t._v(" "),s("div",{staticClass:"custom-block note"},[s("p",{staticClass:"custom-block-title"},[t._v("ZipList编码转化HT编码情况")]),t._v(" "),s("p",[t._v("在采用ZipList编码的时 , 每当 插入/更改 元素 , 都会检测该元素的类型是否满足 , 如果不满足则转换为 HT编码")])]),t._v(" "),s("p",[s("strong",[t._v("ZipList存储的结构")])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("zlbytes")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("zltail")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("zllen")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v('"name"')]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v('"Sans"')]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v('"age"')]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("21")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("...")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("zlend")])])]),t._v(" "),s("tbody")]),t._v(" "),s("h2",{attrs:{id:"_3-网络模型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-网络模型"}},[t._v("#")]),t._v(" 3. 网络模型")]),t._v(" "),s("h3",{attrs:{id:"_3-1-用户空间和内核空间"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-用户空间和内核空间"}},[t._v("#")]),t._v(" 3.1 用户空间和内核空间")]),t._v(" "),s("p",[t._v("在 Linux 中 , 用户空间和内核空间是通过分页机制进行隔离的 , 为了提高系统稳定性和安全性 , 并将两者进行隔离 . 同时 , 内核空间也可以通过硬件保护机制来保护自身不被用户进程非法访问")]),t._v(" "),s("p",[t._v("为了防止用户应用导致冲突影响内核 , 用户应用于内核隔离为两部分 :")]),t._v(" "),s("ul",[s("li",[t._v("用户空间 : 用户进程所处的虚拟内存空间 . 不能访问内核空间 , 必须通过内核提供接口实现")]),t._v(" "),s("li",[t._v("内核空间 : 操作系统内核所处的虚拟内存空间 . 调用一切系统资源")])]),t._v(" "),s("p",[t._v("例如我们分配空间的如下 : (32位空间 4GB)")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("内核空间 1GB")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("用户空间 3GB")])])]),t._v(" "),s("tbody")]),t._v(" "),s("h3",{attrs:{id:"_3-2-阻塞io"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-阻塞io"}},[t._v("#")]),t._v(" 3.2 阻塞IO")]),t._v(" "),s("p",[t._v("阻塞IO是指 当程序进行输入输出操作时 , 如果遇到 阻塞(等待数据读取/写入完成) 时 , 它将一直等待直到操作 完成/超时 两种结果 , 这期间该程序将无法执行其他任务")]),t._v(" "),s("p",[t._v("通过时间线呈现阻塞IO过程 :")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("时间")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("用户")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("内核")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("T1")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("调用recvfrom , 查数据")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("暂无数据")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("T2")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("等待")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("暂无数据")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("T3")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("等待")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("数据就绪")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("T4")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("等待")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("拷贝数据")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("T5")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("完成 / 超时")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("拷贝完成 , 并响应")])])])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),s("p",[t._v("不难看出用户在 T2开始到T4期间在阻塞状态")])]),t._v(" "),s("h3",{attrs:{id:"_3-2-非阻塞io"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-非阻塞io"}},[t._v("#")]),t._v(" 3.2 非阻塞IO")]),t._v(" "),s("p",[t._v("非阻塞IO是指 当程序进行输入输出操作时 , 如果遇到 阻塞(等待数据读取/写入完成) 时 , 程序不会一直等待 , 而是立即返回 , 并且在后续的操作中可以检查IO操作是否完成")]),t._v(" "),s("p",[t._v("通过时间线呈现非阻塞IO过程 :")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("时间")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("用户")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("内核")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("T1")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("调用recvfrom , 查数据")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("暂无数据 , 响应失败")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("T2")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("调用recvfrom , 查数据")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("暂无数据 , 响应失败")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("T(N)")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("...")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("...")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("T(N+1)")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("调用recvfrom , 查数据")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("数据就绪")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("T(N+2)")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("完成")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("拷贝数据 响应")])])])]),t._v(" "),s("div",{staticClass:"custom-block note"},[s("p",{staticClass:"custom-block-title"},[t._v("笔记")]),t._v(" "),s("p",[t._v("非阻塞IO 是不断调用系统请求 , 去询问内核空间 . 在某种情况下 阻塞IO也不差于 非阻塞IO")])]),t._v(" "),s("h3",{attrs:{id:"_3-3-io多路复用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-io多路复用"}},[t._v("#")]),t._v(" 3.3 IO多路复用")]),t._v(" "),s("p",[t._v("IO多路复用 是一种可同时监视多个 "),s("strong",[t._v("文件描述符")]),t._v("(FD) 的机制 , 它可以通过一次系统调用来等待多个IO操作完成 , 从而提高程序的效率和响应能力")]),t._v(" "),s("div",{staticClass:"custom-block note"},[s("p",{staticClass:"custom-block-title"},[t._v("点餐问题")]),t._v(" "),s("p",[t._v("有一些餐厅 , 顾客需要到前台跟服务员沟通点餐 , 但只有一个点餐柜台 . 在就餐高峰期 , 人数往往很多 , 当中总有些人会选择困难 , 不知道要点什么 , 导致后面的人一直在等待 . 就好比在计算机网络中 , 程序等待数据就绪一样 , 会导致 阻塞IO")]),t._v(" "),s("p",[t._v("为了解决这个问题 , 该餐厅进行了一次升级 , 改为扫码点餐 . 现在 , 当用户想好要点什么 , 就通过手机点餐 , 订单发送到前台的打印机 , 通知厨师... 这个流程类似于 IO多路复用的优化方案 , 避免了等待用户点餐思考而产生的阻塞时间")])]),t._v(" "),s("p",[s("strong",[t._v("文件描述符")]),t._v(" (FD) , 是一个从0开始的无符号整数 , 用来关联Linux中的一个文件 . 在Linux中 , 一切皆文件 , 例如常规文件、视频、硬件设备等 , 当然也包括网络套接字(Socket)")]),t._v(" "),s("p",[t._v("通过时间线呈现非阻塞IO过程 :")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("时间")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("用户")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("内核")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("T1")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("调用select , 监听多个FD")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("暂无数据 , 等待数据(监控)")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("T2")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("...")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("暂无数据 , 等待数据(监控)")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("T3")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("...")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("暂无数据 , 等待数据(监控)")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("T N")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("...")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("...")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("T(N+1)")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("-")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("数据就绪 , 可能响应多个socket数据(FD)")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("T(N+2)")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("调用recvfrom , 查数据")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("拷贝数据")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("T(N+3)")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("完成")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("响应数据")])])])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),s("p",[t._v("监控的数据可能会响应多个socket , 调用recvfrom 是循环进行调用的 , 并非一起调用")])]),t._v(" "),s("p",[t._v("IO多路复用 监听FD方式 和 通知方式形式有很多中 , 常见的有 :")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#_3-3-1-select"}},[t._v("select")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#_3-3-2-poll"}},[t._v("poll")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#_3-3-3-epoll"}},[t._v("epoll")])])]),t._v(" "),s("div",{staticClass:"custom-block note"},[s("p",{staticClass:"custom-block-title"},[t._v("监听FD方式的差异")]),t._v(" "),s("ul",[s("li",[t._v("select 和 poll 只会通知用户进程有FD就绪 , 但不确定具体是哪个FD , 需要用户进程逐个遍历FD来确认")]),t._v(" "),s("li",[t._v("epoll 则会在通知用户进程FD就绪的同时 , 把已就绪的FD写入用户空间")])])]),t._v(" "),s("h4",{attrs:{id:"_3-3-1-select"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-1-select"}},[t._v("#")]),t._v(" 3.3.1 select")]),t._v(" "),s("p",[t._v("select是 Linux中的早期 IO多路复用技术的监听方案 , 实现 一个系统调用同时监控多个文件描述符的状态 , 以便在有数据 可读/写入 的时候立即处理 .")]),t._v(" "),s("p",[s("strong",[t._v("缺点 :")])]),t._v(" "),s("ul",[s("li",[t._v("设计多次拷贝 , 要将这个 fd_set从用户空间拷贝到内核空间 , select结束后再次拷贝回来覆盖用户控件的fd_set")]),t._v(" "),s("li",[t._v("无法得知 具体哪个fd就绪 , 需要遍历 fd_set集合")]),t._v(" "),s("li",[t._v("fd_set集合 最大设定fd数量 1024")])]),t._v(" "),s("div",{staticClass:"custom-block note"},[s("p",{staticClass:"custom-block-title"},[t._v("笔记")]),t._v(" "),s("p",[t._v("select是早期设计的思路 , 学习了解 , 无需深入 . 现在学习应用 epoll")])]),t._v(" "),s("p",[s("strong",[t._v("select运作过程 :")])]),t._v(" "),s("ol",[s("li",[s("p",[t._v("用户空间操作 创建fd_set rfds (记录fd监听)")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("...")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("0")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("0")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("0")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("0")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("0")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("0")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("0")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("0")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("0")])])]),t._v(" "),s("tbody")])]),t._v(" "),s("li",[s("p",[t._v("用户空间操作 指定监听 fd =  {1, 2, 5}")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("...")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("0")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("0")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("0")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("0")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("1")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("0")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("0")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("1")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("1")])])]),t._v(" "),s("tbody")])]),t._v(" "),s("li",[s("p",[t._v("用户空间操作 执行select(5+1, rfds, null, null, 3) (参数可参考以下源码)")])]),t._v(" "),s("li",[s("p",[t._v("内核空间操作 遍历接收的 fd_set ,")])]),t._v(" "),s("li",[s("p",[t._v("内核空间操作 如果没有就绪 , 则休眠等待 3s , 休眠后再次遍历集合 (有就绪直接响应结果)")])]),t._v(" "),s("li",[s("p",[t._v("内核空间操作 监听有数据变化着将1设为0 , 并拷贝响应")])]),t._v(" "),s("li",[s("p",[t._v("用户空间操作 收到响应数据 fd_set , 遍历找到就绪的fd , 去读其中的数据")])])]),t._v(" "),s("div",{staticClass:"custom-block note"},[s("p",{staticClass:"custom-block-title"},[t._v("监听执行方式")]),t._v(" "),s("p",[t._v("文件标识符(FD)采用的是比特位进行记录 , 每个bit位代表一个fd , 1代表要监听的fd , 调用select时会监听1的值 , 0代表")])]),t._v(" "),s("p",[s("strong",[t._v("select源码")])]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("源码 点击展开")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 定义类型别名fd_mask,本质是long int")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" Long "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" __fd_mask"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// fd_set记录要监听的fd集合, 及其对应状态")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// fds_bits是long类型数组 , 长度: 1024/32=32")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 共1024个bit位 , 每个bit位代表一个fd, 0:未就绪/1:就绪")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// __fd_mask类型是int(4bytes), 那么 数组大小为 32(数组大小)*32bit(类型)= 1024bit")]),t._v("\n\t__fd_mask fds_bits"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("__FD_SETSIZE "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" __NFDBITS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// .. ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" fd_set"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// select函数 , 用于监听fd_set , 也就是多个fd的集合")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("select")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 要监视的fd_set的最大fd+1(控制最大限度)")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" nfds"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 分别监听fd的 读/写/异常 事件")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 要监听读事件的fd集合")]),t._v("\n\tfd_set "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("readfds"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 要监听写事件的fd集合")]),t._v("\n\tfd_set "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("writefds"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 要监听异常事件的fd集合")]),t._v("\n\tfd_set "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("exceptfds"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//超时时间 , nuL1-用不超时; 0:不阻塞等待/大于0:固定等待时间")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("timeval")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("timeout\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),s("h4",{attrs:{id:"_3-3-2-poll"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-2-poll"}},[t._v("#")]),t._v(" 3.3.2 poll")]),t._v(" "),s("p",[t._v("poll模式对 select做了简单改进 , 性能仍然不明显")]),t._v(" "),s("p",[s("strong",[t._v("相比select:")])]),t._v(" "),s("ul",[s("li",[t._v("pollfd采用链表 , 无上限pd数量")]),t._v(" "),s("li",[t._v("监听fd越多 , 每次上线消耗时间越久 , 性能下降")])]),t._v(" "),s("p",[s("strong",[t._v("poll运作过程 :")])]),t._v(" "),s("ol",[s("li",[t._v("创建 pollfd数组 , 向其中添加相关fd信息")]),t._v(" "),s("li",[t._v("调用 poll() , 将pollfd数组拷贝到内核空间 , 转链表(无上限)")]),t._v(" "),s("li",[t._v("内核遍历fd , 判断是否就绪")]),t._v(" "),s("li",[t._v("数据就绪/超时后 , 拷贝pollfd数组到用户空间 , 返回就绪fd数量n")]),t._v(" "),s("li",[t._v("用户进程判断n是否大于0")]),t._v(" "),s("li",[t._v("大于0则 , 遍历pollfd数组 , 找到就绪的fd")])]),t._v(" "),s("p",[s("strong",[t._v("poll源码")])]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("源码 点击展示")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// pollfd中的事件类型")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("POLLIN")]),t._v("\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 可读事件")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("POLLOUT")]),t._v("\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 可写事件")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("POLLERR")]),t._v("\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 错误事件")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("POLLNVAL")]),t._v("\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// fd未打开")])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// pollfd结构")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pollfd")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 要监听的fd")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" fd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 要监听的事件类型 : 读、写、异常")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("short")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" events"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 实际发生的事件类型")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("short")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" revents"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// poll函数")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("poll")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// pollfd数组 , 可以自定义大小")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pollfd")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("fds"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//数组元素个数")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("nfds_t")]),t._v(" nfds"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//超时时间")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" timeout\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),s("h4",{attrs:{id:"_3-3-3-epoll"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-3-epoll"}},[t._v("#")]),t._v(" 3.3.3 epoll")]),t._v(" "),s("p",[t._v("epoll模式对 select和poll进行了改进")]),t._v(" "),s("p",[s("strong",[t._v("痛点解决 :")])]),t._v(" "),s("ul",[s("li",[t._v("epoll实例中采用红黑树回调形式监听FD , 且无上限 , 增删改查性能高")]),t._v(" "),s("li",[t._v("每个FD只需要执行一次epoll_ctl添加到红黑树 , 以后每次epoll_wait无需传递任何参数 , 无需重复拷贝FD到内核空间")]),t._v(" "),s("li",[t._v("采用回调机制监听FD状态 , 状态就绪添加至rdlist并返回 , 无需返回遍历所有FD")])]),t._v(" "),s("p",[s("strong",[t._v("poll运作过程 :")])]),t._v(" "),s("ol",[s("li",[t._v("创建 epoll_create() 实例")]),t._v(" "),s("li",[t._v("调用 epoll_ctl() , 添加监听FD , 关联回调函数(用于回调加入rdlist就绪链表)")]),t._v(" "),s("li",[t._v("调用 epoll_wait , 等待检查 rdlist链表返回 , 按超时时间等待")])]),t._v(" "),s("p",[s("strong",[t._v("epoll源码")])]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("源码 点击展开")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("eventpoll")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 一颗红黑树 , 记录要监听的FD")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("rb_root")]),t._v(" rbr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 一个链表 , 记录就绪的FD")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("list_head")]),t._v(" rdlist"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1.在内核创建eventpoll结构体 , 返回对应的句柄epfd")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("epoll_create")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2.将一个FD添加到epoll的红黑树中, 并设置ep_poLL_callback")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// callback(回调函数)触发时, 就把对应的FD加入到rdlist这个就绪列表中")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("epoll_ctl")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// epoll实例的句柄")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" epfd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 要执行的操作, 包括: ADD、MOD、DEL")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" op"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 要监听的FD")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" fd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 要监听的事件类型: 读、写、异常等")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("epoll_event")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("event\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3.检查rdlist列表是否为空, 不为空则返回就绪的FD的数量")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("epoll_wait")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//eventpoll实例的句柄")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" epfd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 空event数组, 用于接收就绪的FD")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("epoll_event")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("events"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// events数组的最大长度")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" maxevents"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//超时时间. -1不超时;0不等待;>0等待时长")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" timeout\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),s("h4",{attrs:{id:"_3-3-4-事件通知机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-4-事件通知机制"}},[t._v("#")]),t._v(" 3.3.4 事件通知机制")]),t._v(" "),s("p",[t._v("当FD有数据可读时 , 调用epoll_wait()得到通知 , 但是事件通知的模式有两种 :")]),t._v(" "),s("ul",[s("li",[t._v("LevelTriggered(LT) : 只要某个FD中有数据可读 , 每次调用epoll_wait都会得到通知")]),t._v(" "),s("li",[t._v("EdgeTriggered(ET) : 只有在某个FD有状态变化时 , 调用epoll_wait才会被通知")])]),t._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),s("p",[t._v("当使用 ET 模式时 , 必须确保在文件描述符状态发生变化时及时处理事件 , 否则可能会出现事件丢失的情况")])]),t._v(" "),s("p",[s("strong",[t._v("例子 :")]),t._v(" (采用LT)")]),t._v(" "),s("ol",[s("li",[t._v("假设一个客户端scoket对应的FD已经注册到了epoll实例中")]),t._v(" "),s("li",[t._v("客户端socket发送2KB数据")]),t._v(" "),s("li",[t._v("客户端调用epoll_wait() 等待FD通知(发送的数据已就绪立即返回) . 会立即返回之前已经就绪但是没有被处理的FD , 直到所有FD读取完")]),t._v(" "),s("li",[t._v("服务端从FD读取1kb数据")]),t._v(" "),s("li",[t._v("返回步骤3(才次调用epoll_wait())")])]),t._v(" "),s("p",[s("strong",[t._v("LT和ET对FD文件处理方式 :")])]),t._v(" "),s("ol",[s("li",[t._v("客户端 发送数据后")]),t._v(" "),s("li",[t._v("内核 红黑树当中有FD数据就绪 , 并且添加到 rdlist链表")]),t._v(" "),s("li",[t._v("客户端 调用epoll_wait() 后 , 内核会将 断开 rdlist链表(指针移除) , 并拷贝就绪数据给用户空间")]),t._v(" "),s("li",[t._v("内核 根据不同通知机制来进行抉择 如下 :\n"),s("ul",[s("li",[t._v("LT : 重新链接 rdlist链表 指针指向")]),t._v(" "),s("li",[t._v("ET : 断开 rdlist链表元素之间的 指针指向 , 并删除 (才次调用epoll_wait()结果为null)")])])])]),t._v(" "),s("div",{staticClass:"custom-block note"},[s("p",{staticClass:"custom-block-title"},[t._v("LT存在的问题 :")]),t._v(" "),s("ol",[s("li",[t._v("阻塞 , FD就卡在差一点没读完(读不了) , 从而导致阻塞")]),t._v(" "),s("li",[t._v("无效FD , 重复调用epoll_wait() , 响应可能已经读取的FD , 损耗内存")]),t._v(" "),s("li",[t._v("当有N个进程共同监听有FD文件 , 并都调用有epoll_wait() , 所有进程都会唤醒")])]),t._v(" "),s("p",[t._v("LT 模式并非没有优点 , 它能够确保事件一定会被处理 , 且处理方式更加灵活")])]),t._v(" "),s("h4",{attrs:{id:"_3-3-5-web服务流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-5-web服务流程"}},[t._v("#")]),t._v(" 3.3.5 web服务流程")]),t._v(" "),s("p",[t._v("基于epoll模式web服务的基本流程 :")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://image.bozhu12.cc/myblog/Redis/redis-15.png",alt:""}})]),t._v(" "),s("h3",{attrs:{id:"_3-4-信号驱动io"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-信号驱动io"}},[t._v("#")]),t._v(" 3.4 信号驱动IO")]),t._v(" "),s("p",[t._v("信号驱动IO是一种用于处理异步IO(非阻塞IO)的机制")]),t._v(" "),s("p",[t._v("在信号驱动 IO 机制中 , 进程在发起 IO 操作时 , 可以指定一个信号(SIGIO) , 以便当 IO 操作完成时 , 内核会向进程发送该信号 . 进程可以注册一个信号处理函数来处理该信号 , 从而获得 IO 操作的结果")]),t._v(" "),s("p",[s("strong",[t._v("大致流程 :")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://image.bozhu12.cc/myblog/Redis/redis-16.png",alt:""}})]),t._v(" "),s("div",{staticClass:"custom-block note"},[s("p",{staticClass:"custom-block-title"},[t._v("不常用 信号驱动IO 的原因")]),t._v(" "),s("ul",[s("li",[t._v("当有大量的IO操作时 , 信号较多时 , 可能会导致信号队列溢出问题")]),t._v(" "),s("li",[t._v("内核空间和用户空间 频繁信号交互性能比较低")])])]),t._v(" "),s("h3",{attrs:{id:"_3-5-异步io"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-异步io"}},[t._v("#")]),t._v(" 3.5 异步IO")]),t._v(" "),s("p",[t._v("异步IO的整个过程都是非阻塞的 , 用户进程调用完异步API后就可以去做其它事情 . 当IO操作完成时 , 内核会调用注册的回调函数 , 让程序处理已经完成的IO操作 . 此外 , 程序还需要使用特定的API来启动和管理异步IO操作")]),t._v(" "),s("p",[s("strong",[t._v("大致流程 :")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://image.bozhu12.cc/myblog/Redis/redis-17.png",alt:""}})]),t._v(" "),s("h3",{attrs:{id:"_3-6-redis网络模型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-6-redis网络模型"}},[t._v("#")]),t._v(" 3.6 Redis网络模型")]),t._v(" "),s("p",[t._v("Redis是个纯内存操作 , 它是采用单线程运作 , 网络IO操作都是都是在一个线程里完成")]),t._v(" "),s("p",[s("strong",[t._v("主要组件 :")])]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("事件循环器")]),t._v("(核心) : 它会无限循环等待新的事件发生 , 并且根据不同的事件类型调用相应的处理函数 (处理客户端的连接请求/读写网络数据/...)")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("文件事件")]),t._v("(事件类型) : 包括了可读事件/可写事件/异常事件等 , 这些事件都是基于套接字的网络IO操作(接受新连接/读取客户端发送的数据/发送响应数据/...)")])])]),t._v(" "),s("p",[s("strong",[t._v("大致过程 :")])]),t._v(" "),s("ol",[s("li",[t._v("客户端连接Redis服务器 , 建立TCP连接")]),t._v(" "),s("li",[t._v("Reids将客户端连接封装成一个client结构体(包含有 套接字描述/输入缓冲区/输出缓冲区/... 等信息)")]),t._v(" "),s("li",[t._v("当客户端发送请求时 , Redis会将请求数据从套接字读取到输入缓冲区中")]),t._v(" "),s("li",[t._v("Redis的事件循环器 , 根据不同的事件类型调用相应的处理函数(处理客户端连接请求/读写网络数据)")]),t._v(" "),s("li",[t._v("Redis接收到请求 , 根据对应的请求类型调用处理函数 , 处理函数所需的参数会从输入缓冲区中读取请求数据")]),t._v(" "),s("li",[t._v("处理函数的结果会写入输出缓冲区中 , 并通过套接字发送给客户端")]),t._v(" "),s("li",[t._v("客户端收到响应数据时 , 会从套接字读取到本地缓冲区中 , 然后处理...")]),t._v(" "),s("li",[t._v("当客户端断开连接时 , Redis会清理该客户端的client结构体 , 并断开该客户端的相关套接字连接")])]),t._v(" "),s("p",[s("strong",[t._v("流程图 :")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://image.bozhu12.cc/myblog/Redis/redis-18.png",alt:""}})]),t._v(" "),s("div",{staticClass:"custom-block note"},[s("p",{staticClass:"custom-block-title"},[t._v("Redis业务处理仍然选择单线程的原因")]),t._v(" "),s("ul",[s("li",[t._v("线程问题 . 引入多线程必然会面临的问题 :  上下文切换/性能开销/线程安全/线程锁/...")]),t._v(" "),s("li",[t._v("响应速度 . Redis是纯内存操作 , 速度非常快 , 响应速度的瓶颈还卡在网络延迟问题")])])]),t._v(" "),s("h2",{attrs:{id:"_4-通信协议"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-通信协议"}},[t._v("#")]),t._v(" 4. 通信协议")]),t._v(" "),s("h3",{attrs:{id:"_4-1-resp协议"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-resp协议"}},[t._v("#")]),t._v(" 4.1 RESP协议")]),t._v(" "),s("p",[t._v("RESP协议是一种文本协议 , 用于客户端与Redis服务器之间的通信")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),s("p",[t._v("本次学习 RESP2协议")])]),t._v(" "),s("p",[s("strong",[t._v("RESP协议数据类型 :")])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("数据类型")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("结构")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("示例")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("单行字符串")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[s("code",[t._v("+")]),t._v(" + 字符串内容 + "),s("code",[t._v("\\r\\n")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v('"ok" => "+ok\\r\\n"')])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("错误")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[s("code",[t._v("-")]),t._v(" + 字符串内容 + "),s("code",[t._v("\\r\\n")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v('"-Error message\\r\\n"')])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("数值")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[s("code",[t._v(":")]),t._v(" + 整型 + "),s("code",[t._v("\\r\\n")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v('":10\\r\\n"')])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("多行字符串")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[s("code",[t._v("$n")]),t._v(" + 多行内容 + "),s("code",[t._v("\\r\\n\\r\\n")]),t._v("(含有两个情况)")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("以下特别说明")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("数组")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[s("code",[t._v("*n")]),t._v(" + 元素1+元素2+..")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("以下特别说明")])])])]),t._v(" "),s("p",[s("strong",[t._v("多行字符串 :")]),t._v(" $后面的n代表字符串的长度  , 最大支持512MB . 以下使用方式 :")]),t._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("$25\\r\\n\nThis is a multi-line string\\r\\n\nthat spans multiple lines.\\r\\n\n\\r\\n\n")])])]),s("div",{staticClass:"custom-block note"},[s("p",{staticClass:"custom-block-title"},[t._v("结构说明")]),t._v(" "),s("p",[t._v("每行都已 "),s("code",[t._v("\\r\\n")]),t._v(' 结尾进行换行 , 第一行以 $25 开始 , 表示字符串的总长度为 25 个字节 . 第二行和第三行分别包含 "This is a multi-line string" 和 "that spans multiple lines." 两个子字符串 , 最后一行只包含两个 \\r\\n , 表示字符串的结束')])]),t._v(" "),s("p",[s("strong",[t._v("数组 :")]),t._v(" $后面的n代表数组n个元素 . 以下使用方式 :")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("*3\\r\\n\n$3\\r\\nset\\r\\n\n$4\\r\\nname\\r\\n\n$4\\r\\nSans\\r\\n\n")])])]),s("div",{staticClass:"custom-block note"},[s("p",{staticClass:"custom-block-title"},[t._v("结构说明")]),t._v(" "),s("p",[t._v("每一个头标识作为一个元素的开始 , 一共有3个 "),s("code",[t._v("$")]),t._v(" , 他们分别是 ['set','name','Sans']")])]),t._v(" "),s("h3",{attrs:{id:"_4-2-java模拟redis客户端"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-java模拟redis客户端"}},[t._v("#")]),t._v(" 4.2 Java模拟Redis客户端")]),t._v(" "),s("p",[t._v("以Main通信测试 :")]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("代码示例 点击展开")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Main")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Socket")]),t._v(" socket "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PrintWriter")]),t._v(" writer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BufferedReader")]),t._v(" reader"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" host "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"192.xxx.xx"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" password "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"123123"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" port "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6379")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1. 建立连接")]),t._v("\n            socket "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Socket")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("host"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" port"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2. 获取 输入/输出 流 (字符流)")]),t._v("\n            writer "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PrintWriter")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n                    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("OutputStreamWriter")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("socket"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getOutputStream")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StandardCharsets")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("UTF_8")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            reader "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BufferedReader")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n                    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InputStreamReader")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("socket"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getInputStream")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StandardCharsets")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("UTF_8")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3. 认证")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sendRequest")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"auth"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" password"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" obj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("handleResponse")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"登录 => "')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 4. 发送 命令请求")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// set测试")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//sendRequest("set", "name2", "张三");')]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// get测试")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//sendRequest("get","name");')]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sendRequest")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"mget"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name2"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 异常测试 (不存在)")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//sendRequest("get","xa");')]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 5. 解析响应")]),t._v("\n            obj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("handleResponse")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"res => "')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Exception")]),t._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RuntimeException")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("finally")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 6. 释放连接")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reader "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" reader"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("close")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("writer "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" writer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("close")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("socket "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" socket"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("close")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Exception")]),t._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printStackTrace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("handleResponse")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IOException")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 读取首字节 , 判断类型")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" prefix "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" reader"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("read")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("switch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("prefix"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token char"}},[t._v("'+'")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" reader"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("readLine")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token char"}},[t._v("'-'")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RuntimeException")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reader"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("readLine")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token char"}},[t._v("':'")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Long")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseLong")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reader"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("readLine")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token char"}},[t._v("'$'")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 新读取长度 , 后读数据")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" len "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Long")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseLong")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reader"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("readLine")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("len "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("len "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" reader"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("readLine")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token char"}},[t._v("'*'")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("readBulkString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RuntimeException")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"未知格式"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("readBulkString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IOException")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 循环读取")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" len "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Long")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseLong")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reader"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("readLine")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("len "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" list "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayList")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" len"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("handleResponse")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sendRequest")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" ages"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        writer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"*"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" ages"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" age "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" ages"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 字节大小(并非字符个数)")]),t._v("\n            writer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"$"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getBytes")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StandardCharsets")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("UTF_8")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            writer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        writer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("flush")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),s("ul",[s("li",[t._v("每次发送请求后都要对应读取响应")]),t._v(" "),s("li",[t._v("写入缓冲区后的命令 , 写完后一定要刷新")])])]),t._v(" "),s("h2",{attrs:{id:"_5-redis内存策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-redis内存策略"}},[t._v("#")]),t._v(" 5. Redis内存策略")]),t._v(" "),s("h3",{attrs:{id:"_5-1-过期策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-过期策略"}},[t._v("#")]),t._v(" 5.1 过期策略")]),t._v(" "),s("p",[t._v("Redis中的过期机制必不可少 , 它之所以强 , 是因为它是基于内存实现 , 且内存的容量是有限的")]),t._v(" "),s("p",[t._v("Redis是通过一个新的结构体redisDb 存过期时间以及其他属性 :")]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("redisDb结构体源码 点击展开")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("redisDb")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 存储 key-value本身")]),t._v("\n    dict "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("dict"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 存过期时间 key-ttl")]),t._v("\n    dict "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("expires"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    dict "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("blocking_keys"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("        \n    dict "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ready_keys"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("          \n    dict "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("watched_keys"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("         \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Database ID , 0~15 */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" avg_ttl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("           "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 记录平均TTL时长 */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" expires_cursor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* expire检查时在dict中抽样的索引位置. */")]),t._v("\n    list "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("defrag_later"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("          "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 等待碎片整理的key列表. */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" redisDb"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),s("p",[s("strong",[t._v("key过期策略 :")])]),t._v(" "),s("ul",[s("li",[t._v("惰性过期")]),t._v(" "),s("li",[t._v("定期过期")])]),t._v(" "),s("p",[s("strong",[t._v("惰性过期")])]),t._v(" "),s("p",[t._v("客户端请求访问过期key时 , 会对其key检查ttl , 如果key过期返回nil , 并删除")]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("惰性过期源码 点击展开")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 查找一个key执行写操作")]),t._v("\nrobj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("lookupKeyWriteWithFlags")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("redisDb "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("db"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" robj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" flags"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 检查key是否过期")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("expireIfNeeded")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("db"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("lookupKey")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("db"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("flags"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 查找一个key执行读操作")]),t._v("\nrobj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("lookupKeyReadWithFlags")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("redisDb "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("db"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" robj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" flags"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    robj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("val"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 检查key是否过期   ")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("expireIfNeeded")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("db"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("expireIfNeeded")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("redisDb "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("db"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" robj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 判断是否过期 , 如果未过期直接结束并返回0")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("keyIsExpired")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("db"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ... ")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 删除过期key")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("deleteExpiredKeyAndPropagate")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("db"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),s("div",{staticClass:"custom-block note"},[s("p",{staticClass:"custom-block-title"},[t._v("遗留问题")]),t._v(" "),s("p",[t._v("如果长期没有得到访问 , 该数据内存则会长期卡在内存中 , 从而引起内存浪费!")])]),t._v(" "),s("p",[s("strong",[t._v("定期过期")])]),t._v(" "),s("p",[t._v("定期扫描过期key并对其过期key删除 , 周期执行种类有两种 :")]),t._v(" "),s("ul",[s("li",[t._v("SLOW模式")]),t._v(" "),s("li",[t._v("FAST模式")])]),t._v(" "),s("p",[s("strong",[t._v("SLOW模式")])]),t._v(" "),s("p",[t._v("定时任务执行serverCron() , 按照 server.hz 频率执行过期key清理 . 该模式有以下规则 :")]),t._v(" "),s("ul",[s("li",[t._v("执行频率 , 运作周期受 server.hz影响(默认10) , 周期100ms(10次/秒)")]),t._v(" "),s("li",[t._v("清除时长 , 在每个运作的周期中 , 清除key所需的时间不能超过 周期单位的25%(默认25ms)")]),t._v(" "),s("li",[t._v("逐个遍历db , 遍历db中的 bucket 哈希表数组的每个角标(进度) , 抽取20个key进行判断过期")]),t._v(" "),s("li",[t._v("如果清除时长没有达到上限(默认25ms) , 且key过期比例大于10% , 会再次进行一次抽样 , 否则结束")])]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("SLOW模式源码")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 初始化")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("initServer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建定时器 , 关联回调函数serverCron , 处理周期取决于server.hz , 默认10")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("aeCreateTimeEvent")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("server"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("el"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" serverCron"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 定期执行")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("serverCron")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("aeEventLoop")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("eventLoop"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("clientData"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 更新lruclock到当前时间 , 为后期的LRU和LFU做准备")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" lruclock "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getLRUClock")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("atomicSet")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("server"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lruclock"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("lruclock"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 执行database的数据清理 , 例如过期key处理")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("databasesCron")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回等待加载下一周期的时间 100(1000/10)")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("server"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("hz"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 清除任务")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("databasesCron")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 尝试清理部分过期key , 清理模式默认为SLOW")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("activeExpireCycle")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ACTIVE_EXPIRE_CYCLE_SLOW"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),s("p",[s("strong",[t._v("FAST模式")])]),t._v(" "),s("p",[t._v("每个事件循环前会调用 beforeSleep()函数 , 清理过期key . 该模式有以下规则 :")]),t._v(" "),s("ul",[s("li",[t._v("执行频率 , 运作周期受 beforeSleep()调用频率 , 频率不固定 , 但两次间隔不低于2ms")]),t._v(" "),s("li",[t._v("清除时长 , 清除耗时不超过1ms")]),t._v(" "),s("li",[t._v("逐个遍历db , 遍历db中的 bucket 哈希表数组的每个角标(进度) , 抽取20个key进行判断过期")]),t._v(" "),s("li",[t._v("如果清除时长没有达到上限(默认1ms) , 且key过期比例大于10% , 会再次进行一次抽样 , 否则结束")])]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("FAST模式源码 点击展开")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 事件触发")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("aeMain")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("aeEventLoop "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("eventLoop"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    eventLoop"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("stop "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("eventLoop"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("stop"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// beforeSleep() --\x3e FAST模式清理")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// n = aeApiPoll()")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果 n>0 , FD就绪 , 处理IO事件")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果到了执行时间 , 则调用 serverCron() --\x3e SLOW模式清理")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 清除任务")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("beforeSleep")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("aeEventLoop")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("eventLoop"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 尝试清理部分过期key , 清理模式默认为FAST")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("activeExpireCycle")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ACTIVE_EXPIRE_CYCLE_FAST"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),s("p",[s("strong",[t._v("SLOW与FAST区别")])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}}),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("SLOW模式")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("FAST模式")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("执行速度")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("<=10ms")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("<=1ms")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("清理量")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("大量")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("少量")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("周期频率")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("低频(100ms)")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("高频")])])])]),t._v(" "),s("h3",{attrs:{id:"_5-2-淘汰策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-淘汰策略"}},[t._v("#")]),t._v(" 5.2 淘汰策略")]),t._v(" "),s("p",[t._v("Redis中的内存淘汰机制是指 当 Redis占用的内存超过了物理内存限制 或者 超过 "),s("code",[t._v("server.maxmemory")]),t._v(" 配置的上限 时 , 主动的去 "),s("strong",[t._v("删除部分key")]),t._v(" , 以达释放内存应用")]),t._v(" "),s("p",[s("strong",[t._v("淘汰策略 :")])]),t._v(" "),s("p",[t._v("以下淘汰策略可以在Redis配置中的 "),s("code",[t._v("maxmemory-policy")]),t._v("选项配置")]),t._v(" "),s("ol",[s("li",[s("strong",[t._v("noeviction")]),t._v(" : 禁止淘汰 (默认) , 当内存到达上限时 , 拒绝所有写入操作")]),t._v(" "),s("li",[s("strong",[t._v("volatile-ttl")]),t._v(" : 淘汰最小ttl , 仅对设置了ttl , 且ttl最小的最优先淘汰")]),t._v(" "),s("li",[s("strong",[t._v("allkeys-random")]),t._v(" : 随机key淘汰 , 对所有key进行随机淘汰")]),t._v(" "),s("li",[s("strong",[t._v("volatile-random")]),t._v(" : 随机ttl淘汰 , 对所有设置了ttl进行随机淘汰")]),t._v(" "),s("li",[s("strong",[t._v("allkeys-lru")]),t._v(" : LRU算法key淘汰 , 使用LRU算法对key选择淘汰")]),t._v(" "),s("li",[s("strong",[t._v("volatile-lru")]),t._v(" : LRU算法ttl淘汰 , 使用LRU算法对ttl选择淘汰")]),t._v(" "),s("li",[s("strong",[t._v("allkeys-lfu")]),t._v(" : LFU算法key淘汰 , 使用LFU算法对key选择淘汰")]),t._v(" "),s("li",[s("strong",[t._v("volatile-lfu")]),t._v(" : LFU算法ttl淘汰 , 使用LFU算法对ttl选择淘汰")])]),t._v(" "),s("div",{staticClass:"custom-block note"},[s("p",{staticClass:"custom-block-title"},[t._v("LRU与LFU 说明")]),t._v(" "),s("p",[s("strong",[t._v("LRU :")]),t._v(" 最近最少使用 . 根据 当前时间减去最后一次访问时间 , 值越大越优先淘汰")]),t._v(" "),s("p",[s("strong",[t._v("LFU :")]),t._v(" 最不经常使用 . 根据 统计的访问次数 , 值越小越优先淘汰")])]),t._v(" "),s("p",[t._v("LRU与LFU判断的属性 存储在 "),s("a",{attrs:{href:"#_2-7-redisobject"}},[t._v("RedisObject")]),t._v(" 结构体中 , 他们存储分别是的形式 :")]),t._v(" "),s("ul",[s("li",[t._v("LRU : 以秒为单位记录最近一次访问时间 , 长度24bit")]),t._v(" "),s("li",[t._v("LFU : 高位16 记录最近访问时间(分钟单位) ; 低位8 记录逻辑访问次数")])]),t._v(" "),s("p",[t._v("LFU中的逻辑访问次数并非是统计key访问的次数 , 而是通过运算的 :")]),t._v(" "),s("ol",[s("li",[t._v("生成 0 - 1 之间的随机数R")]),t._v(" "),s("li",[t._v("计算 (旧次数 * lfu_log_factor + 1) , 记录为P (lfu_log_factor默认10)")]),t._v(" "),s("li",[t._v("如果 R < P , 则计数器 + 1 , 且最大不超过255")]),t._v(" "),s("li",[t._v("访问次数会随时间衰减 , 距离上一次访问时间每隔 lfu_decay_time 分钟 , 计数器 - 1")]),t._v(" "),s("li",[t._v("上次访问时间间隔默认1min")])]),t._v(" "),s("p",[s("strong",[t._v("淘汰策略的流程图 :")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://image.bozhu12.cc/myblog/Redis/redis-19.png",alt:""}})]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("原理篇啃了一周 , 说实话挺不容易的 , 太久没接触c语言了 . 上述笔记如有理解不到位 , 请在下方评论指正!")])])}),[],!1,null,null,null);s.default=e.exports}}]);